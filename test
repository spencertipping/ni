#!/bin/bash
cd $(dirname $0)

envs=( alpine
       centos-6
       debian-wheezy
       ubuntu-12.04
       ubuntu-14.04
       ubuntu-16.04
       ubuntu-16.04-p3
       ubuntu-16.10 )

markdowns=( $(ls doc | sed 's/.md$//' ) )

generate_gitlab_ci() {
  for e in ${envs[@]}; do
    echo "$e:"
    echo "  image: spencertipping/ni-env-dev-$e"
    echo "  script:"
    echo "    - ./test --ci"
  done
}

generate_travis_ci() {
  echo "sudo: required"
  echo "services:"
  echo "- docker"

  echo "before_install:"
  for e in ${envs[@]}; do
    echo "- docker pull spencertipping/ni-env-dev-$e"
  done

  echo "script:"
  for e in ${envs[@]}; do
    echo "- docker run --rm -it -v \$PWD:/data spencertipping/ni-env-dev-$e ./test --ci"
  done
}

generate_gitlab_ci > .gitlab-ci.yml
generate_travis_ci > .travis.yml

if [[ $1 == '-o' ]] || [[ $1 == '--only' ]]; then
  test_set=$2
  shift 2
fi

build_tests() {
  {
    echo "#!/bin/bash"
    echo cd /tmp
    echo export NI_NO_MONITOR=yes
    ./lazytest ${test_set:-$(find doc bugs -name '*.md' | sort)}
  } > dev/tests.sh
}

build_ni_stuff() {
  ./build
  build_tests
}

tests() { rm -f .test-cancel; echo 'bash /data/dev/tests.sh'; }
image() { echo spencertipping/ni-env-dev-$1; }

default_image=ubuntu-16.04

docker_dind="-v /var/run/docker.sock:/var/run/docker.sock --privileged"
docker_magic="--security-opt=seccomp=unconfined"
docker_opts="$docker_magic $docker_dind -i -m 256M --rm -v $PWD:/data:ro"

c=$1
shift
case $c in
-b|--build)
  for e in ${envs[@]}; do
    echo
    echo "BUILDING $e"
    echo
    docker build -f env/$e -t spencertipping/ni-env-dev-$e .
    docker push spencertipping/ni-env-dev-$e
  done
  ;;

-p|--pull)
  for e in ${envs[@]}; do
    docker pull spencertipping/ni-env-dev-$e
  done
  ;;

-q|--quick)
  echo "NOTE: standard error is redirected into test.log"
  build_ni_stuff
  tests | docker run $docker_opts --name ni-test $(image ${1:-$default_image}) /bin/bash 2>test.log
  ;;

-r|--repl)
  echo "NOTE: to run tests, cd /tmp && bash /data/dev/tests.sh"
  build_ni_stuff
  docker run $docker_opts -t --name ni-test-repl $(image ${1:-$default_image}) /bin/bash
  ;;

-c|--cancel)
  touch .test-cancel
  docker rm -f ni-test ni-test-hadoop
  ;;

--ci)
  cp dev/tests.sh /tmp/
  cp ni /usr/bin/

  /usr/bin/ni --run '$ni::self{license} = ni::rf "dev/license-for-testing";
                     ni::modify_self' > /dev/null

  export SKIP_DOCKER=yes                # FIXME when possible
  # FIXME sorry about this. Some tests are flaky in the CI environment but not
  # in the real world or in normal docker -- no clue why. I'm working on the
  # major OO refactor and don't have a good reason to fix this, so here's an
  # inelegant kludge:
  bash /tmp/tests.sh \
    || bash /tmp/tests.sh \
    || bash /tmp/tests.sh \
    || exit 1
  ;;

--full)
  echo "NOTE: standard error is redirected into test.log"
  build_ni_stuff
  for e in ${envs[@]}; do
    if [[ -e .test-cancel ]]; then
      rm .test-cancel
      exit 1
    fi
    echo
    echo "TESTING $e"
    echo
    tests | docker run $docker_opts --name ni-test $(image $e) /bin/bash
    echo
  done 2>test.log
  ;;

--update|*)
  build_tests
  ;;
esac

#!/usr/bin/env perl
chomp($ni::license=<<'_');
ni: https://github.com/spencertipping/ni
Copyright (c) 2016-2017 Spencer Tipping

MIT license

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
_
BEGIN{eval($ni::boot=<<'_')}
use strict;
use warnings;
no warnings qw/redefine void/;
no strict 'refs';
use Errno;
use Fcntl;
use POSIX;
use Scalar::Util;
chomp $ni::boot;
$ni::self = bless {named => {}}, 'lib/ni';
sub ni(;$) {@_ ? ref($_[0]) ? $_[0] : $ni::self->resolve($_[0]) : $ni::self}
sub ni::eval {eval shift}
*{'lib/ni::def'} = sub {
  my ($self, %kvs) = @_;
  $$self{named}{$_} = $kvs{$_} for keys %kvs;
};
*{'lib/fn::OVERLOAD'} = {};
*{'lib/fn::(bool'} = sub {1};
*{'lib/fn::()'}    = sub {};
*{'lib/fn::(&{}'}  = sub {$_[0]->{fn} ||= $_[0]->compile};
*{'lib/fn::compile'} = sub {
  my $self = shift;
  $$self{fn} = ni::eval "sub{$$self{code}\n}";
  die "ni:/lib/fn failed to compile $$self{code}: $@\n" if $@;
  $$self{fn};
};
sub fn($);
_
$c=q#named#;
$d=q#ni.doc:/class#;
$e=q#doc#;
$f=q#synopsis#;
$g=q#
    ni('ni:/object')->child('/message')
      ->add('/behaviorname.b')          \# add existing behavior
      ->def('/message_init.b',          \# define new slice behavior
        instantiate => fn q{            \# called from ->new()
          my ($class, $message) = @_;
          +{message => $message};       \# return object to be blessed
        })
      ->def('/behaviorname.b',          \# define another behavior
        method1 => fn q{
          my $self = shift;
          print "message for you sir! '" . $$self{message} . "'\\n";
        });
    ni('ni:/child')->new('hello world!')->method1;
  #;
$h=[$f,$g];
$i=q#description#;
$j=q#ni:class is at the core of ni's object-oriented system, along with core
      classes like ni:object and ni:metaclass. There are two layers of
      abstraction involved here: Perl packages are modified by behaviors, and
      classes encode the higher-level declarative features you'd expect from a
      language like Ruby or Smalltalk. This documentation covers both layers.#;
$k=[$i,$j];
$l=q#behaviors#;
$m=q#ni's objects are blessed Perl references, and behaviors are objects
      that modify Perl packages in specific ways. The simplest is
      ni:/lib/slice, which represents a set of methods you can add to a
      package.#;
$n=q#eg#;
$o=q#annotations#;
$p=[];
$q=q#code#;
$r=q#my $fn = fn q{"hi"};
my $slice = ni('ni:/lib/slice')->new('myslice', f => $fn);
$slice->apply('foo');
now foo->f == 'hi';#;
$s=q#proto#;
$t=q##;
$u=q#lib/fn#;
$v=bless({$o,$p,$q,$r,$s,$t},$u);
$w=q#lib/fn::ctors#;
$x=q#TODO...#;
$y=[$l,$m,$n,$v,$x];
$z=q#classes#;
$A=q#ni implements a Smalltalk 80-style metaclass system with a couple of
      differences. First, ni's classes are slice unions and as such don't
      support colliding methods; and second, they support multiple inheritance.
      These two points are related: method overriding isn't in the picture,
      which makes multiple inheritance straightforward to implement.#;
$B=[$z,$A,$x];
$C=[$h,$k,$y,$B];
$D=q#name#;
$E=q#/class#;
$F=q#lib/doc#;
$G=bless({$e,$C,$D,$E},$F);
$H=q#lib/doc::ctors#;
$I=q#ni.doc:/fabric#;
$J=q#Abstractions to bridge the gaps between separate machines and processes.
      This module is designed to make it appear as though all resources are
      local, or at least can be referred to locally -- even when they belong to
      an external process (e.g. a Hadoop mapper) or another machine (e.g. a
      file over SSH). If we can bidirectionally communicate with a remote ni
      instance, then we can see its resources.#;
$K=[$i,$J];
$L=[$K];
$M=q#/fabric#;
$N=bless({$e,$L,$D,$M},$F);
$O=q#ni.doc:/io#;
$P=q#An implementation of IO in terms of system-level FDs. We need this for a
      few reasons, three of them being that (1) old versions of Perl don't
      correctly handle interrupted system calls, (2) we want tighter control
      over which FDs are closed at what times, and (3) we want to be able to
      "unread" things -- push back against the read buffer (or use a custom
      read format in general).#;
$Q=[$i,$P];
$R=[$Q];
$S=q#/io#;
$T=bless({$e,$R,$D,$S},$F);
$U=q#ni.doc:/io/buffer#;
$V=q#
    my $buf = ni("ni:/io/buffer")->new(8192);
    $buf->write("foo");
    $buf->read($_, 256);        \# reads "foo"#;
$W=[$f,$V];
$X=q#A bounded, memory-backed FIFO data queue. In IO terms, this object
      behaves like a nonblocking socket and sets errno accordingly.#;
$Y=[$i,$X];
$Z=[];
$c1=q#my $buf = ni('ni:/io/buffer')->new(128);
now [$buf->read_capacity, $buf->write_capacity] == [0, 128];
now $buf->write("foobarbif") == 9;
now [$buf->read_capacity, $buf->write_capacity] == [9, 119];
now [$buf->read($_, 5), $_] == [5, "fooba"];

now $buf->write(" " x 125) == 124;
now $buf->read($_, 120) == 120;
now [$buf->read($_, 100), $_, $buf->read_capacity] == [8, " " x 8, 0];#;
$d1=bless({$o,$Z,$q,$c1,$s,$t},$u);
$e1=[$n,$d1];
$f1=[$W,$Y,$e1];
$g1=q#/io/buffer#;
$h1=bless({$e,$f1,$D,$g1},$F);
$i1=q#ni.doc:/io/cat#;
$j1=q#
    my $combined = ni('ni:/io/cat')->new($io1, $io2, ...);
    my $combined = $io1 + $io2 + $io3;
    $combined->into_sync($destination_io);
  #;
$k1=[$f,$j1];
$l1=q#Concatenates multiple IO objects into a single read-only data source.
      This is a mutable object that consumes its inputs and then loses its
      references to them as quickly as possible, allowing their resources to be
      freed. Once fully consumed, the cat object holds no references.#;
$m1=[$i,$l1];
$n1=[];
$o1=q#my $cat = ni('str:foo') + ni('str:bar');
now $cat->read_all == "foo\\nbar\\n";#;
$p1=bless({$o,$n1,$q,$o1,$s,$t},$u);
$q1=[$n,$p1];
$r1=[$k1,$m1,$q1];
$s1=q#/io/cat#;
$t1=bless({$e,$r1,$D,$s1},$F);
$u1=q#ni.doc:/io/exec#;
$v1=q#
    my $pid = ni("ni:/io/exec")->new("ls", "-l")
      ->connect(1 => ni("file:foo")->w)
      ->env(ENV_VAR => "value", ENV2 => "val2")
      ->fork;
    $? = $pid->await or die "ls -l failed: $?";#;
$w1=[$f,$v1];
$x1=q#An object that represents a fork+exec operation that hasn't yet happened.
      It allows you to incrementally specify the context of the process,
      including environment variables and file descriptor mappings. It is also
      an IO object and will set up pipes to stdin/out if you use it this way.#;
$y1=[$i,$x1];
$z1=[];
$A1=q#my $e   = ni('ni:/io/exec')->new('echo', 'hi');
my $out = $e->stdout;
my $pid = $e->fork;
now $out->read_all == "hi\\n";
now $pid->await == 0;#;
$B1=bless({$o,$z1,$q,$A1,$s,$t},$u);
$C1=[$n,$B1];
$D1=[$w1,$y1,$C1];
$E1=q#/io/exec#;
$F1=bless({$e,$D1,$D,$E1},$F);
$G1=q#ni.doc:/io/mio#;
$H1=q#
    my $sender   = ni("ni:/io/mio")->new;
    my $receiver = ni("ni:/io/mio")->new;
    my $c1 = $mio->channel(1);
    my $c2 = $mio->channel(2);
    my $t1 = $channel1->write_all("8MB data" x 1000000);
    my $t2 = $channel2->write_all("short string");
    my $t3 = $mio->into_async();#;
$I1=[$f,$H1];
$J1=q#Provides a multiplexed interface around a single possibly-bidirectional
      IO channel. The channel is assumed to be durable and order-preserving;
      this multiplexing interface just interleaves multiple data streams to
      make sure large transfers along one channel don't cause arbitrarily large
      delays along other channels.#;
$K1=q#In IO terms, channel objects behave like nonblocking sockets.#;
$L1=q#
      #;
$M1=[$i,$J1,$K1,$L1];
$N1=[$I1,$M1];
$O1=q#/io/mio#;
$P1=bless({$e,$N1,$D,$O1},$F);
$Q1=q#ni.doc:/io/pid#;
$R1=[];
$S1=q#now [ni('sh:true')->await, ni('sh:false')->await] == [0, 1 << 8];#;
$T1=bless({$o,$R1,$q,$S1,$s,$t},$u);
$U1=[$n,$T1];
$V1=[];
$W1=q#my $pid = ni('sh:seq 4');
my $data = $pid->read_all;
now [$pid->await, $data] == [0, "1\\n2\\n3\\n4\\n"];#;
$X1=bless({$o,$V1,$q,$W1,$s,$t},$u);
$Y1=[$n,$X1];
$Z1=[];
$c2=q#my $seq = ni('sh:seq 10');
my $grep = ni('ni:/io/exec')->new('egrep', '[13579]$')
  ->connect(0 => $seq->stdout)
  ->fork;
now [$grep->read_all, $seq->await, $grep->await]
 == ["1\\n3\\n5\\n7\\n9\\n", 0, 0];#;
$d2=bless({$o,$Z1,$q,$c2,$s,$t},$u);
$e2=[$n,$d2];
$f2=[$U1,$Y1,$e2];
$g2=q#/io/pid#;
$h2=bless({$e,$f2,$D,$g2},$F);
$i2=q#ni.doc:/lib#;
$j2=q#Bootstrapping code for the core abstractions in ni, and almost everything
      about its introspection. This includes definitions for documentation,
      unit tests, classes, support for basic image generation, etc -- and when
      possible, it's written with some awareness of downstream use cases (for
      instance, image serialization and RMI share logic).#;
$k2=[$i,$j2];
$l2=[$k2];
$m2=q#/lib#;
$n2=bless({$e,$l2,$D,$m2},$F);
$o2=q#ni.doc:/lib/doc#;
$p2=q#
    ni("ni:/some/class")->doc
      ->synopsis(...)
      ->description(...)
      ->eg(...)
      ...#;
$q2=[$f,$p2];
$r2=q#Associate documentation with the specified class. Documentation is stored
      separately and in the "ni.doc" namespace; this way you can serialize
      instances of the class and the class's code without bringing along all of
      its documentation and unit tests.#;
$s2=q#Documentation objects are internally represented as arrays of quoted
      method calls:#;
$t2=[];
$u2=q#my $doc = ni("ni:/lib/doc")->new("foo");
now $doc->{doc} == [];
$doc->foo("bar bif baz");
now $doc->{doc} == [["foo", "bar bif baz"]];#;
$v2=bless({$o,$t2,$q,$u2,$s,$t},$u);
$w2=q#This documentation can later be compiled into things like manpages,
      markdown, or HTML by target-specific conversion functions. Documentation
      also stores unit tests, which are specified using "eg":#;
$x2=[];
$y2=q#my $doc = ni("ni:/lib/doc")->new("foo");
my $passing_test = fn q{return 1};
my $failing_test = fn q{return 0};
$doc->eg($passing_test)
    ->description(q[Foo objects are contrived examples.],
                  eg => $failing_test,
                  q[So there.]);
now [$doc->tests] == [$passing_test, $failing_test];#;
$z2=bless({$o,$x2,$q,$y2,$s,$t},$u);
$A2=[$i,$r2,$s2,$n,$v2,$w2,$n,$z2];
$B2=[$q2,$A2];
$C2=q#/lib/doc#;
$D2=bless({$e,$B2,$D,$C2},$F);
$E2=q#ni.doc:/semantic#;
$F2=q#Opportunities to assign real-world semantics to objects. This is a
      collection of behaviors that don't necessarily imply a Perl-level
      protocol, but which may end up meaning something at some point.#;
$G2=[$i,$F2];
$H2=[$G2];
$I2=q#/semantic#;
$J2=bless({$e,$H2,$D,$I2},$F);
$K2=q#ni:/class#;
$L2=q#applied_to#;
$M2=q#class#;
$N2=q#class.c#;
$O2=q#fabric/rmi.c#;
$P2=q#io/buffer.c#;
$Q2=q#io/cat.c#;
$R2=q#io/exec.c#;
$S2=q#io/fd.c#;
$T2=q#io/file.c#;
$U2=q#io/mio.c#;
$V2=q#io/mio_channel.c#;
$W2=q#io/null.c#;
$X2=q#io/object.c#;
$Y2=q#io/pid.c#;
$Z2=q#io/str.c#;
$c3=q#io/transfer.c#;
$d3=q#io/transfer_async.c#;
$e3=q#io/transfer_sync.c#;
$f3=q#lib/behavior.c#;
$g3=q#lib/branch.c#;
$h3=q#lib/dataslice.c#;
$i3=q#lib/doc.c#;
$j3=q#lib/fn.c#;
$k3=q#lib/image.c#;
$l3=q#lib/ni.c#;
$m3=q#lib/quote_simple.c#;
$n3=q#lib/slice.c#;
$o3=q#lib/tag.c#;
$p3=q#lib/test_value.c#;
$q3=q#metaclass.c#;
$r3=q#module.c#;
$s3=q#object.c#;
$t3=q#semantic/dimension#;
$u3=q#semantic/dimension.c#;
$v3=q#semantic/task.c#;
$w3={$M2,1,$N2,1,$O2,1,$P2,1,$Q2,1,$R2,1,$S2,1,$T2,1,$U2,1,$V2,1,$W2,1,$X2,1,$Y2,1,$Z2,1,$c3,1,$d3,1,$e3,1,$f3,1,$g3,1,$h3,1,$i3,1,$j3,1,$k3,1,$l3,1,$m3,1,$n3,1,$o3,1,$p3,1,$q3,1,$r3,1,$s3,1,$t3,1,$u3,1,$v3,1};
$x3=q#slices#;
$y3=q#metaclass#;
$z3=q#module#;
$A3={$M2,1,$N2,1,$O2,1,$P2,1,$Q2,1,$R2,1,$S2,1,$T2,1,$U2,1,$V2,1,$W2,1,$X2,1,$Y2,1,$Z2,1,$c3,1,$d3,1,$e3,1,$f3,1,$g3,1,$h3,1,$i3,1,$j3,1,$k3,1,$l3,1,$m3,1,$n3,1,$o3,1,$p3,1,$y3,1,$q3,1,$z3,1,$r3,1,$s3,1,$t3,1,$u3,1,$v3,1};
$B3=q#/module#;
$C3=q#/lib/perlbranch.b#;
$D3={};
$E3=q#ctor#;
$F3=undef;
$G3=q#dtor#;
$H3=q#methods#;
$I3=q#add#;
$J3=q#local $_;
my $self = shift;
my @s = map $self->resolve($_), @_;
push @{$$self{slices}}, @s;
for my $p (sort keys %{$$self{applied_to}}) {$_->apply($p) for @s}
$self;#;
$K3=bless({$q,$J3,$s,$t},$u);
$L3=q#apply#;
$M3=q#local $_;
my ($self, $p) = @_;
$p = $p->package if ref $p;
$$self{applied_to}{$p} = 1;
$_->apply($p) for @{$$self{slices}};
$self;#;
$N3=bless({$q,$M3,$s,$t},$u);
$O3={$I3,$K3,$L3,$N3};
$P3=q#/lib/branch.b#;
$Q3=q#lib/slice#;
$R3=bless({$L2,$D3,$E3,$F3,$G3,$F3,$H3,$O3,$D,$P3},$Q3);
$S3=q#lib/branch#;
$T3=q#lib/slice::ctors#;
$U3={};
$V3=q#my $s = shift; ni->def($s->name, $s)#;
$W3=bless({$q,$V3,$s,$t},$u);
$X3=q#$_[0]->namespace . ":" . $_[0]->{name}#;
$Y3=bless({$q,$X3,$s,$t},$u);
$Z3={$D,$Y3};
$c4=q#/lib/named.b#;
$d4=bless({$L2,$U3,$E3,$W3,$G3,$F3,$H3,$Z3,$D,$c4},$Q3);
$e4=q#lib/tag#;
$f4={};
$g4=q#namespace#;
$h4=q#'ni'#;
$i4=bless({$q,$h4,$s,$t},$u);
$j4={$g4,$i4};
$k4=q#/lib/named_in_ni.b#;
$l4=bless({$L2,$f4,$E3,$F3,$G3,$F3,$H3,$j4,$D,$k4},$Q3);
$m4={};
$n4=q#package#;
$o4=q#(my $name = shift->{name}) =~ s/^\\///; $name#;
$p4=bless({$q,$o4,$s,$t},$u);
$q4={$n4,$p4};
$r4=q#/lib/namespaced.b#;
$s4=bless({$L2,$m4,$E3,$F3,$G3,$F3,$H3,$q4,$D,$r4},$Q3);
$t4={};
$u4=q#resolve#;
$v4=q#ref $_[1] ? $_[1] : ni"ni:$_[1]"#;
$w4=bless({$q,$v4,$s,$t},$u);
$x4={$u4,$w4};
$y4=q#/lib/resolver.b#;
$z4=bless({$L2,$t4,$E3,$F3,$G3,$F3,$H3,$x4,$D,$y4},$Q3);
$A4=[$R3,$d4,$l4,$s4,$z4];
$B4=bless({$D,$C3,$x3,$A4},$e4);
$C4=q#lib/tag::ctors#;
$D4={};
$E4=q#my $s = shift; $s->apply($s->package)#;
$F4=bless({$q,$E4,$s,$t},$u);
$G4=q#instantiate#;
$H4=q#local $_;
my ($class, $name, @slices) = @_;
+{name   => $name,
  slices => [map $class->resolve($_), @slices]};#;
$I4=bless({$q,$H4,$s,$t},$u);
$J4={$G4,$I4};
$K4=q#/lib/class_init.b#;
$L4=bless({$L2,$D4,$E3,$F4,$G3,$F3,$H3,$J4,$D,$K4},$Q3);
$M4=q#fabric/rmi#;
$N4=q#io/buffer#;
$O4=q#io/cat#;
$P4=q#io/exec#;
$Q4=q#io/fd#;
$R4=q#io/file#;
$S4=q#io/mio#;
$T4=q#io/mio_channel#;
$U4=q#io/null#;
$V4=q#io/object#;
$W4=q#io/pid#;
$X4=q#io/str#;
$Y4=q#io/transfer#;
$Z4=q#io/transfer_async#;
$c5=q#io/transfer_sync#;
$d5=q#lib/behavior#;
$e5=q#lib/dataslice#;
$f5=q#lib/image#;
$g5=q#lib/ni#;
$h5=q#lib/quote_simple#;
$i5=q#lib/test_value#;
$j5=q#object#;
$k5=q#semantic/task#;
$l5={$M2,1,$N2,1,$M4,1,$O2,1,$N4,1,$P2,1,$O4,1,$Q2,1,$P4,1,$R2,1,$Q4,1,$S2,1,$R4,1,$T2,1,$S4,1,$U2,1,$T4,1,$V2,1,$U4,1,$W2,1,$V4,1,$X2,1,$W4,1,$Y2,1,$X4,1,$Z2,1,$Y4,1,$c3,1,$Z4,1,$d3,1,$c5,1,$e3,1,$d5,1,$f3,1,$S3,1,$g3,1,$e5,1,$h3,1,$F,1,$i3,1,$u,1,$j3,1,$f5,1,$k3,1,$g5,1,$l3,1,$h5,1,$m3,1,$Q3,1,$n3,1,$e4,1,$o3,1,$i5,1,$p3,1,$y3,1,$q3,1,$z3,1,$r3,1,$j5,1,$s3,1,$t3,1,$u3,1,$k5,1,$v3,1};
$m5=q#/object#;
$n5={};
$o5=q#ni 'ni:/' . ref shift#;
$p5=bless({$q,$o5,$s,$t},$u);
$q5={$M2,$p5};
$r5=q#/lib/instance.b#;
$s5=bless({$L2,$n5,$E3,$F3,$G3,$F3,$H3,$q5,$D,$r5},$Q3);
$t5=[$s5];
$u5=bless({$L2,$l5,$D,$m5,$x3,$t5},$s3);
$v5=q#object.c::ctors#;
$w5={$M2,1,$N2,1,$O2,1,$P2,1,$Q2,1,$R2,1,$S2,1,$T2,1,$U2,1,$V2,1,$W2,1,$X2,1,$Y2,1,$Z2,1,$c3,1,$d3,1,$e3,1,$d5,1,$f3,1,$S3,1,$g3,1,$e5,1,$h3,1,$i3,1,$j3,1,$k3,1,$l3,1,$m3,1,$Q3,1,$n3,1,$e4,1,$o3,1,$p3,1,$y3,1,$q3,1,$z3,1,$r3,1,$s3,1,$t3,1,$u3,1,$v3,1};
$x5=q#/lib/behavior#;
$y5={};
$z5=q#my $self = shift;
(my $name = $self->name) =~ s/^[^:]*://;
return ni("ni.doc:$name") if ni->can('exists') && ni->exists("ni.doc:$name");
ni('ni:/lib/doc')->new($name);#;
$A5=bless({$q,$z5,$s,$t},$u);
$B5={$e,$A5};
$C5=q#/lib/documentable.b#;
$D5=bless({$L2,$y5,$E3,$F3,$G3,$F3,$H3,$B5,$D,$C5},$Q3);
$E5=[$u5,$D5];
$F5=bless({$L2,$w5,$D,$x5,$x3,$E5},$f3);
$G5=q#lib/behavior.c::ctors#;
$H5={$M2,1,$N2,1,$O2,1,$P2,1,$Q2,1,$R2,1,$S2,1,$T2,1,$U2,1,$V2,1,$W2,1,$X2,1,$Y2,1,$Z2,1,$c3,1,$d3,1,$e3,1,$f3,1,$S3,1,$g3,1,$h3,1,$i3,1,$j3,1,$k3,1,$l3,1,$m3,1,$n3,1,$o3,1,$p3,1,$y3,1,$q3,1,$z3,1,$r3,1,$s3,1,$t3,1,$u3,1,$v3,1};
$I5=q#/lib/definition.b#;
$J5={};
$K5=q#def#;
$L5=q#my $self = shift;
my $name = shift;
$self->add(ni->exists("ni:$name")
  ? ni"ni:$name"
  : ni('ni:/lib/slice')->new($name, @_));
$self;#;
$M5=bless({$q,$L5,$s,$t},$u);
$N5={$K5,$M5};
$O5=q#/lib/definition_def.b#;
$P5=bless({$L2,$J5,$E3,$F3,$G3,$F3,$H3,$N5,$D,$O5},$Q3);
$Q5={};
$R5=q#ro#;
$S5=q#my ($self, $slice, @rs) = @_;
$self->add(ni('ni:/lib/slice')->new(
  $slice,
  map +($_ => fn qq{shift->{'$_'}}), @rs));#;
$T5=bless({$q,$S5,$s,$t},$u);
$U5=q#rw#;
$V5=q#my ($self, $slice, @as) = @_;
$self->add(ni('ni:/lib/slice')->new(
  $slice,
  map +($_ => fn qq{\\@_ == 2 ? \\$_[0]->{'$_'} = \\$_[1] : shift->{'$_'}}), @as));#;
$W5=bless({$q,$V5,$s,$t},$u);
$X5={$R5,$T5,$U5,$W5};
$Y5=q#/lib/accessor.b#;
$Z5=bless({$L2,$Q5,$E3,$F3,$G3,$F3,$H3,$X5,$D,$Y5},$Q3);
$c6={};
$d6=q#(""#;
$e6=q#shift->name#;
$f6=bless({$q,$e6,$s,$t},$u);
$g6={$d6,$f6};
$h6=q#/lib/name_as_string.b#;
$i6=bless({$L2,$c6,$E3,$F3,$G3,$F3,$H3,$g6,$D,$h6},$Q3);
$j6={};
$k6=q#(eq#;
$l6=q#ref($_[0]) eq ref($_[1])
  and Scalar::Util::refaddr($_[0]) == Scalar::Util::refaddr($_[1]);#;
$m6=bless({$q,$l6,$s,$t},$u);
$n6={$k6,$m6};
$o6=q#/lib/ref_eq.b#;
$p6=bless({$L2,$j6,$E3,$F3,$G3,$F3,$H3,$n6,$D,$o6},$Q3);
$q6={};
$r6=q#defdata#;
$s6=q#shift->add(ni('ni:/lib/dataslice')->new(@_))#;
$t6=bless({$q,$s6,$s,$t},$u);
$u6={$r6,$t6};
$v6=q#/lib/definition_defdata.b#;
$w6=bless({$L2,$q6,$E3,$F3,$G3,$F3,$H3,$u6,$D,$v6},$Q3);
$x6=[$P5,$Z5,$i6,$p6,$w6];
$y6=bless({$L2,$H5,$D,$I5,$x3,$x6},$S3);
$z6=q#lib/branch::ctors#;
$A6=[$B4,$L4,$u5,$F5,$y6];
$B6=bless({$L2,$A3,$D,$B3,$x3,$A6},$r3);
$C6=q#module.c::ctors#;
$D6={};
$E6=q#DESTROY#;
$F6=q#local $_;
my $self = shift;
$_->($self) for @{ref($self) . "::dtors"};#;
$G6=bless({$q,$F6,$s,$t},$u);
$H6=q#new#;
$I6=q#local $_;
my $class = ref $_[0] ? shift->package : shift;
my $self = bless $class->instantiate(@_), $class;
$_->($self) for @{ref($self) . "::ctors"};
$self;#;
$J6=bless({$q,$I6,$s,$t},$u);
$K6={$E6,$G6,$H6,$J6};
$L6=q#/lib/instantiable.b#;
$M6=bless({$L2,$D6,$H3,$K6,$D,$L6},$Q3);
$N6={};
$O6=q#child#;
$P6=q#my ($self, $name, @slices) = @_;
ni("ni:/metaclass")->new("$name.c", $self->class)
->new($name, $self, @slices);#;
$Q6=bless({$q,$P6,$s,$t},$u);
$R6={$O6,$Q6};
$S6=q#/lib/subclass.b#;
$T6=bless({$L2,$N6,$E3,$F3,$G3,$F3,$H3,$R6,$D,$S6},$Q3);
$U6=[$B6,$M6,$L4,$B6,$T6];
$V6=bless({$L2,$w3,$D,$E,$x3,$U6},$N2);
$W6=q#class.c::ctors#;
$X6=q#ni:/class.c#;
$Y6={$N2,1,$u3,1};
$Z6=q#/class.c#;
$c7={$N2,1,$r3,1,$u3,1};
$d7=q#/module.c#;
$e7={$N2,1,$O2,1,$P2,1,$Q2,1,$R2,1,$S2,1,$T2,1,$U2,1,$V2,1,$W2,1,$X2,1,$Y2,1,$Z2,1,$c3,1,$d3,1,$e3,1,$f3,1,$g3,1,$h3,1,$i3,1,$j3,1,$k3,1,$l3,1,$m3,1,$n3,1,$o3,1,$p3,1,$r3,1,$s3,1,$u3,1,$v3,1};
$f7=q#/object.c#;
$g7=[$V6];
$h7=bless({$L2,$e7,$D,$f7,$x3,$g7},$y3);
$i7=q#metaclass::ctors#;
$j7={$N2,1,$f3,1,$g3,1,$h3,1,$n3,1,$o3,1,$r3,1,$u3,1};
$k7=q#/lib/behavior.c#;
$l7=[$h7];
$m7=bless({$L2,$j7,$D,$k7,$x3,$l7},$y3);
$n7=[$h7,$M6,$m7];
$o7=bless({$L2,$c7,$D,$d7,$x3,$n7},$y3);
$p7=[$o7];
$q7=bless({$L2,$Y6,$D,$Z6,$x3,$p7},$y3);
$r7=q#ni:/fabric/rmi#;
$s7={$M4,1};
$t7=q#/fabric/rmi#;
$u7={};
$v7=[];
$w7=q#my ($class, $io, $quote) = @_;#;
$x7=bless({$o,$v7,$q,$w7,$s,$t},$u);
$y7={$G4,$x7};
$z7=q#/fabric/rmi_init.b#;
$A7=bless({$L2,$u7,$E3,$F3,$G3,$F3,$H3,$y7,$D,$z7},$Q3);
$B7=[$u5,$A7];
$C7=bless({$L2,$s7,$D,$t7,$x3,$B7},$O2);
$D7=q#fabric/rmi.c::ctors#;
$E7=q#ni:/fabric/rmi.c#;
$F7={$O2,1};
$G7=q#/fabric/rmi.c#;
$H7=[$h7];
$I7=bless({$L2,$F7,$D,$G7,$x3,$H7},$y3);
$J7=q#ni:/fabric/rmi_init.b#;
$K7=q#ni:/io/buffer#;
$L7={$N4,1};
$M7={$N4,1,$O4,1,$P4,1,$Q4,1,$R4,1,$S4,1,$T4,1,$U4,1,$V4,1,$W4,1,$X4,1};
$N7=q#/io/object#;
$O7={};
$P7=q#(bool#;
$Q7=[];
$R7=bless({$o,$Q7,$q,1,$s,$t},$u);
$S7={$P7,$R7};
$T7=q#/io/object_ops.b#;
$U7=bless({$L2,$O7,$E3,$F3,$G3,$F3,$H3,$S7,$D,$T7},$Q3);
$V7={};
$W7=q#die#;
$X7=[];
$Y7=q#shift; die join " ", @_#;
$Z7=bless({$o,$X7,$q,$Y7,$s,$t},$u);
$c8=q#io_check#;
$d8=[];
$e8=q#my $self  = shift;
my $check = shift;
my $fn    = shift;
my $r     = &$fn(@_);
$self->die($fn, $!) unless &$check($r);
$r;#;
$f8=bless({$o,$d8,$q,$e8,$s,$t},$u);
$g8=q#io_check_defined#;
$h8=[];
$i8=q#shift->io_check(sub {defined shift}, @_)#;
$j8=bless({$o,$h8,$q,$i8,$s,$t},$u);
$k8=q#io_check_true#;
$l8=[];
$m8=q#shift->io_check(sub {shift}, @_)#;
$n8=bless({$o,$l8,$q,$m8,$s,$t},$u);
$o8={$W7,$Z7,$c8,$f8,$g8,$j8,$k8,$n8};
$p8=q#/io/object_checks.b#;
$q8=bless({$L2,$V7,$E3,$F3,$G3,$F3,$H3,$o8,$D,$p8},$Q3);
$r8={};
$s8=q#(+#;
$t8=[];
$u8=q#ni('ni:/io/cat')->new(@_[0, 1])#;
$v8=bless({$o,$t8,$q,$u8,$s,$t},$u);
$w8={$s8,$v8};
$x8=q#/io/object_constructors.b#;
$y8=bless({$L2,$r8,$E3,$F3,$G3,$F3,$H3,$w8,$D,$x8},$Q3);
$z8={};
$A8=q#read_all#;
$B8=[];
$C8=q#shift->into_sync(ni('ni:/io/str')->new(my $data = ''));
$data;#;
$D8=bless({$o,$B8,$q,$C8,$s,$t},$u);
$E8=q#write_all#;
$F8=[];
$G8=q#my $self = shift;
ni('ni:/io/str')->new($_[0])->into_async($self);#;
$H8=bless({$o,$F8,$q,$G8,$s,$t},$u);
$I8={$A8,$D8,$E8,$H8};
$J8=q#/io/object_memory.b#;
$K8=bless({$L2,$z8,$E3,$F3,$G3,$F3,$H3,$I8,$D,$J8},$Q3);
$L8={};
$M8=q#connect_sync#;
$N8=[];
$O8=q#my ($self, $rhs) = @_;
($self->into_sync($rhs),
 $rhs->into_sync($self));#;
$P8=bless({$o,$N8,$q,$O8,$s,$t},$u);
$Q8=q#into_sync#;
$R8=[];
$S8=q#ni('ni:/io/transfer_sync')->new(@_)->run#;
$T8=bless({$o,$R8,$q,$S8,$s,$t},$u);
$U8={$M8,$P8,$Q8,$T8};
$V8=q#/io/object_transfer_sync.b#;
$W8=bless({$L2,$L8,$E3,$F3,$G3,$F3,$H3,$U8,$D,$V8},$Q3);
$X8={};
$Y8=q#connect_async#;
$Z8=[];
$c9=q#my ($self, $rhs) = @_;
($self->into_async($rhs),
 $rhs->into_async($self));#;
$d9=bless({$o,$Z8,$q,$c9,$s,$t},$u);
$e9=q#into_async#;
$f9=[];
$g9=q#ni('ni:/io/transfer_async')->new(@_)->run#;
$h9=bless({$o,$f9,$q,$g9,$s,$t},$u);
$i9={$Y8,$d9,$e9,$h9};
$j9=q#/io/object_transfer_async.b#;
$k9=bless({$L2,$X8,$E3,$F3,$G3,$F3,$H3,$i9,$D,$j9},$Q3);
$l9=[$u5,$U7,$q8,$y8,$K8,$W8,$k9,$k9,$W8];
$m9=bless({$L2,$M7,$D,$N7,$x3,$l9},$X2);
$n9=q#io/object.c::ctors#;
$o9={};
$p9=[];
$q9=q#my ($class, $capacity) = @_;
$capacity ||= 65536;
$class->die("buffer capacity must be a power of two (got $capacity)")
  if $capacity & $capacity - 1;
+{capacity    => $capacity,
  data        => "\\0" x $capacity,
  read_point  => 0,
  write_point => 0};#;
$r9=bless({$o,$p9,$q,$q9,$s,$t},$u);
$s9={$G4,$r9};
$t9=q#/io/buffer_init.b#;
$u9=bless({$L2,$o9,$E3,$F3,$G3,$F3,$H3,$s9,$D,$t9},$Q3);
$v9={};
$w9=q#read#;
$x9=[];
$y9=q#my $self = shift;
my $rcap = $self->read_capacity;
$! = Errno::EWOULDBLOCK, return undef unless $rcap;

my $length = $_[1];
my $offset = $_[2] || 0;
$length = $rcap if $length > $rcap;

my $capacity   = $$self{capacity};
my $read_index = $$self{read_point} & $capacity - 1;
if ($read_index + $length > $capacity) {
  my $read_size = $capacity - $read_index;
  if ($offset) {
    $_[0] ||= "\\0" x $length;
    substr $_[0], $offset, $read_size,
           substr $$self{data}, $read_index, $read_size;
    substr $_[0], $offset + $read_size, $length - $read_size,
           substr $$self{data}, 0, $length - $read_size;
  } else {
    $_[0] = substr($$self{data}, $read_index, $read_size)
          . substr($$self{data}, 0, $length - $read_size);
  }
  $$self{read_point} += $length;
  return $length;
} else {
  if ($offset) {
    substr $_[0], $offset, $length,
           substr $$self{data}, $read_index, $length;
  } else {
    $_[0] = substr $$self{data}, $read_index, $length;
  }
  $$self{read_point} += $length;
  return $length;
}#;
$z9=bless({$o,$x9,$q,$y9,$s,$t},$u);
$A9=q#read_capacity#;
$B9=[];
$C9=q#my $self = shift;
$$self{write_point} - $$self{read_point};#;
$D9=bless({$o,$B9,$q,$C9,$s,$t},$u);
$E9=q#write#;
$F9=[];
$G9=q#my $self = shift;
my $wcap = $self->write_capacity;
$! = Errno::EWOULDBLOCK, return undef unless $wcap;

my $length = @_ > 1 ? $_[1] : length $_[0];
my $offset = $_[2] || 0;
$length    = $wcap if $length > $wcap;

my $capacity    = $$self{capacity};
my $write_index = $$self{write_point} & $capacity - 1;
if ($write_index + $length > $capacity) {
  \# Two-part write
  my $write_size = $capacity - $write_index;
  substr $$self{data}, $write_index, $write_size,
         substr $_[0], 0, $write_size;
  substr $$self{data}, 0, $length - $write_size,
         substr $_[0], $offset + $write_size, $length - $write_size;
  $$self{write_point} += $length;
  return $length;
} else {
  \# One-part write
  substr $$self{data}, $write_index, $length,
         length $_[0] == $length && !$offset
           ? $_[0]
           : substr $_[0], $offset, $length;
  $$self{write_point} += $length;
  return $length;
}#;
$H9=bless({$o,$F9,$q,$G9,$s,$t},$u);
$I9=q#write_capacity#;
$J9=[];
$K9=q#my $self = shift;
$$self{capacity} - $$self{write_point} + $$self{read_point};#;
$L9=bless({$o,$J9,$q,$K9,$s,$t},$u);
$M9={$w9,$z9,$A9,$D9,$E9,$H9,$I9,$L9};
$N9=q#/io/buffer_io.b#;
$O9=bless({$L2,$v9,$E3,$F3,$G3,$F3,$H3,$M9,$D,$N9},$Q3);
$P9=[$m9,$u9,$O9];
$Q9=bless({$L2,$L7,$D,$g1,$x3,$P9},$P2);
$R9=q#io/buffer.c::ctors#;
$S9=q#ni:/io/buffer.c#;
$T9={$P2,1};
$U9=q#/io/buffer.c#;
$V9={$P2,1,$Q2,1,$R2,1,$S2,1,$T2,1,$U2,1,$V2,1,$W2,1,$X2,1,$Y2,1,$Z2,1};
$W9=q#/io/object.c#;
$X9={};
$Y9=q#def_transfer_method#;
$Z9=[];
$ca=q#my ($class, $transfer_class, $method_name) = @_;
my $transfer_name = $transfer_class->name;
$class->def("/io/object_transfer_$method_name.b",
  "into_$method_name" => fn qq{ni('$transfer_name')->new(\\@_)->run},
  "connect_$method_name" => fn qq{
    my (\\$self, \\$rhs) = \\@_;
    (\\$self->into_$method_name(\\$rhs),
     \\$rhs->into_$method_name(\\$self));
  });#;
$da=bless({$o,$Z9,$q,$ca,$s,$t},$u);
$ea={$Y9,$da};
$fa=q#/io/object.c_transfer_def.b#;
$ga=bless({$L2,$X9,$E3,$F3,$G3,$F3,$H3,$ea,$D,$fa},$Q3);
$ha=[$h7,$ga];
$ia=bless({$L2,$V9,$D,$W9,$x3,$ha},$y3);
$ja=[$ia];
$ka=bless({$L2,$T9,$D,$U9,$x3,$ja},$y3);
$la=q#ni:/io/buffer_init.b#;
$ma=q#ni:/io/buffer_io.b#;
$na=q#ni:/io/cat#;
$oa={$O4,1};
$pa={};
$qa=[];
$ra=q#shift; +{fs => [@_]}#;
$sa=bless({$o,$qa,$q,$ra,$s,$t},$u);
$ta={$G4,$sa};
$ua=q#/io/cat_init.b#;
$va=bless({$L2,$pa,$E3,$F3,$G3,$F3,$H3,$ta,$D,$ua},$Q3);
$wa={};
$xa=[];
$ya=q#my $fs = shift->{fs};
my $n;
until (!@$fs or $n = $$fs[0]->read(@_)) {
  return $n unless defined $n;
  shift @$fs;
}
return $n;#;
$za=bless({$o,$xa,$q,$ya,$s,$t},$u);
$Aa={$w9,$za};
$Ba=q#/io/cat_read.b#;
$Ca=bless({$L2,$wa,$E3,$F3,$G3,$F3,$H3,$Aa,$D,$Ba},$Q3);
$Da=[$m9,$va,$Ca];
$Ea=bless({$L2,$oa,$D,$s1,$x3,$Da},$Q2);
$Fa=q#io/cat.c::ctors#;
$Ga=q#ni:/io/cat.c#;
$Ha={$Q2,1};
$Ia=q#/io/cat.c#;
$Ja=[$ia];
$Ka=bless({$L2,$Ha,$D,$Ia,$x3,$Ja},$y3);
$La=q#ni:/io/cat_init.b#;
$Ma=q#ni:/io/cat_read.b#;
$Na=q#ni:/io/exec#;
$Oa={$P4,1};
$Pa={};
$Qa=q#argv#;
$Ra=[];
$Sa=q#shift->{'argv'}#;
$Ta=bless({$o,$Ra,$q,$Sa,$s,$t},$u);
$Ua={$Qa,$Ta};
$Va=q#/io/exec_ro.b#;
$Wa=bless({$L2,$Pa,$E3,$F3,$G3,$F3,$H3,$Ua,$D,$Va},$Q3);
$Xa={};
$Ya=[];
$Za=q#my ($class, @argv) = @_;
+{argv         => \\@argv,
  env          => {%ENV},
  internal_fds => {},
  external_fds => {}};#;
$cb=bless({$o,$Ya,$q,$Za,$s,$t},$u);
$db={$G4,$cb};
$eb=q#/io/exec_init.b#;
$fb=bless({$L2,$Xa,$E3,$F3,$G3,$F3,$H3,$db,$D,$eb},$Q3);
$gb={};
$hb=q#connect#;
$ib=[];
$jb=q#my ($self, %fds) = @_;
@{$$self{internal_fds}}{keys %fds} = values %fds;
$self;#;
$kb=bless({$o,$ib,$q,$jb,$s,$t},$u);
$lb=q#in_pipe#;
$mb=[];
$nb=q#local $_;
my $self = shift;
for (@_) {
  my ($r, $w) = POSIX::pipe;
  $self->die($!) unless defined $r;
  $$self{internal_fds}{$_} = ni('ni:/io/fd')->new($r)->cloexec(0);
  $$self{external_fds}{$_} = ni('ni:/io/fd')->new($w)->cloexec(1);
}
$self;#;
$ob=bless({$o,$mb,$q,$nb,$s,$t},$u);
$pb=q#out_pipe#;
$qb=[];
$rb=q#local $_;
my $self = shift;
for (@_) {
  my ($r, $w) = POSIX::pipe;
  $self->die($!) unless defined $r;
  $$self{internal_fds}{$_} = ni('ni:/io/fd')->new($w)->cloexec(0);
  $$self{external_fds}{$_} = ni('ni:/io/fd')->new($r)->cloexec(1);
}
$self;#;
$sb=bless({$o,$qb,$q,$rb,$s,$t},$u);
$tb=q#setup_stdio#;
$ub=[];
$vb=q#my $self = shift;
$self->connect(0 => ni('null:')->fd->cloexec(0)) unless $self->binds_fd(0);
$self->out_pipe(1) unless $self->binds_fd(1);
$self->out_pipe(2) unless $self->binds_fd(2);
$self;#;
$wb=bless({$o,$ub,$q,$vb,$s,$t},$u);
$xb={$hb,$kb,$lb,$ob,$pb,$sb,$tb,$wb};
$yb=q#/io/exec_io_setup.b#;
$zb=bless({$L2,$gb,$E3,$F3,$G3,$F3,$H3,$xb,$D,$yb},$Q3);
$Ab={};
$Bb=q#binds_fd#;
$Cb=[];
$Db=q#my ($self, $fd) = @_;
$$self{internal_fds}{$fd};#;
$Eb=bless({$o,$Cb,$q,$Db,$s,$t},$u);
$Fb=q#fd#;
$Gb=[];
$Hb=q#my ($self, $fd) = @_;
$$self{external_fds}{$fd};#;
$Ib=bless({$o,$Gb,$q,$Hb,$s,$t},$u);
$Jb=q#stderr#;
$Kb=[];
$Lb=q#my $self = shift;
$self->binds_fd(2) ? $self->fd(2) : $self->out_pipe(2)->fd(2);#;
$Mb=bless({$o,$Kb,$q,$Lb,$s,$t},$u);
$Nb=q#stdin#;
$Ob=[];
$Pb=q#my $self = shift;
$self->binds_fd(0) ? $self->fd(0) : $self->in_pipe(0)->fd(0);#;
$Qb=bless({$o,$Ob,$q,$Pb,$s,$t},$u);
$Rb=q#stdout#;
$Sb=[];
$Tb=q#my $self = shift;
$self->binds_fd(1) ? $self->fd(1) : $self->out_pipe(1)->fd(1);#;
$Ub=bless({$o,$Sb,$q,$Tb,$s,$t},$u);
$Vb={$Bb,$Eb,$Fb,$Ib,$Jb,$Mb,$Nb,$Qb,$Rb,$Ub};
$Wb=q#/io/exec_io_accessors.b#;
$Xb=bless({$L2,$Ab,$E3,$F3,$G3,$F3,$H3,$Vb,$D,$Wb},$Q3);
$Yb={};
$Zb=q#env#;
$cc=[];
$dc=q#my ($self, %env) = @_;
return $$self{env} unless keys %env;
@{$$self{env}}{keys %env} = values %env;
$self;#;
$ec=bless({$o,$cc,$q,$dc,$s,$t},$u);
$fc={$Zb,$ec};
$gc=q#/io/exec_env.b#;
$hc=bless({$L2,$Yb,$E3,$F3,$G3,$F3,$H3,$fc,$D,$gc},$Q3);
$ic={};
$jc=q#exec#;
$kc=[];
$lc=q#my $self = shift->setup_stdio->move_fds;
my @argv = (@{$$self{argv}}, @_);
$_->close for values %{$$self{external_fds}};
local %ENV = %{$$self{env}};
{ exec @argv };
$self->stderr("exec failed", $!);
1;#;
$mc=bless({$o,$kc,$q,$lc,$s,$t},$u);
$nc=q#fork#;
$oc=[];
$pc=q#my $self = shift->setup_stdio;
my $pid  = $self->io_check_defined(*main::fork);
exit $self->exec(@_) unless $pid;
$_->close for values %{$$self{internal_fds}};
delete $$self{internal_fds};
ni('ni:/io/pid')->new(
  $pid,
  [@{$$self{argv}}, @_],
  $$self{env},
  %{$$self{external_fds}});#;
$qc=bless({$o,$oc,$q,$pc,$s,$t},$u);
$rc=q#move_fds#;
$sc=[];
$tc=q#my $self = shift;
$$self{internal_fds}{$_}->be($_) for keys %{$$self{internal_fds}};
$self;#;
$uc=bless({$o,$sc,$q,$tc,$s,$t},$u);
$vc={$jc,$mc,$nc,$qc,$rc,$uc};
$wc=q#/io/exec_fork.b#;
$xc=bless({$L2,$ic,$E3,$F3,$G3,$F3,$H3,$vc,$D,$wc},$Q3);
$yc=[$m9,$Wa,$fb,$zb,$Xb,$hc,$xc];
$zc=bless({$L2,$Oa,$D,$E1,$x3,$yc},$R2);
$Ac=q#io/exec.c::ctors#;
$Bc=q#ni:/io/exec.c#;
$Cc={$R2,1};
$Dc=q#/io/exec.c#;
$Ec=[$ia];
$Fc=bless({$L2,$Cc,$D,$Dc,$x3,$Ec},$y3);
$Gc=q#ni:/io/exec_env.b#;
$Hc=q#ni:/io/exec_fork.b#;
$Ic=q#ni:/io/exec_init.b#;
$Jc=q#ni:/io/exec_io_accessors.b#;
$Kc=q#ni:/io/exec_io_setup.b#;
$Lc=q#ni:/io/exec_ro.b#;
$Mc=q#ni:/io/fd#;
$Nc={$Q4,1};
$Oc=q#/io/fd#;
$Pc={};
$Qc=[];
$Rc=q#shift->{'fd'}#;
$Sc=bless({$o,$Qc,$q,$Rc,$s,$t},$u);
$Tc={$Fb,$Sc};
$Uc=q#/io/fd_readers.b#;
$Vc=bless({$L2,$Pc,$E3,$F3,$G3,$F3,$H3,$Tc,$D,$Uc},$Q3);
$Wc={};
$Xc=[];
$Yc=q#my ($class, $fd) = @_;
+{fd  => ref $fd ? fileno $fd : $fd,
  rfh => undef,
  wfh => undef};#;
$Zc=bless({$o,$Xc,$q,$Yc,$s,$t},$u);
$cd={$G4,$Zc};
$dd=q#/io/fd_init.b#;
$ed=bless({$L2,$Wc,$E3,$F3,$G3,$F3,$H3,$cd,$D,$dd},$Q3);
$fd={};
$gd=q#be#;
$hd=[];
$id=q#my ($self, $new) = @_;
return $self if $new == $$self{fd};
$self->io_check_defined(*POSIX::dup2, $$self{fd}, $new);
$$self{rfh} = $$self{wfh} = undef;
POSIX::close $$self{fd};
$$self{fd} = $new;
$self;#;
$jd=bless({$o,$hd,$q,$id,$s,$t},$u);
$kd={$gd,$jd};
$ld=q#/io/fd_shell.b#;
$md=bless({$L2,$fd,$E3,$F3,$G3,$F3,$H3,$kd,$D,$ld},$Q3);
$nd={};
$od=q#cloexec#;
$pd=[];
$qd=q#shift->fcntl_flag(Fcntl::FD_CLOEXEC, @_)#;
$rd=bless({$o,$pd,$q,$qd,$s,$t},$u);
$sd=q#fcntl_flag#;
$td=[];
$ud=q#my ($self, $flag, $value) = @_;
$self->io_check_true(*main::open2, $$self{rfh}, "<&=$$self{fd}")
  unless $$self{rfh};
my $flags = $self->io_check_true(
  *main::fcntl, $$self{rfh}, Fcntl::F_GETFL, 0);
if (@_) {
  if (shift) {$flags |= $flag}
  else       {$flags &= ~$flag}
  $self->io_check_true(*main::fcntl, $$self{rfh}, Fcntl::F_SETFL, $flags);
  $self;
} else {
  !!($flags & $flag);
}#;
$vd=bless({$o,$td,$q,$ud,$s,$t},$u);
$wd=q#nonblock#;
$xd=[];
$yd=q#shift->fcntl_flag(Fcntl::O_NONBLOCK, @_)#;
$zd=bless({$o,$xd,$q,$yd,$s,$t},$u);
$Ad={$od,$rd,$sd,$vd,$wd,$zd};
$Bd=q#/io/fd_fcntl.b#;
$Cd=bless({$L2,$nd,$E3,$F3,$G3,$F3,$H3,$Ad,$D,$Bd},$Q3);
$Dd={};
$Ed=[];
$Fd=q#shift->close#;
$Gd=bless({$o,$Ed,$q,$Fd,$s,$t},$u);
$Hd=q#close#;
$Id=[];
$Jd=q#my $self = shift;
close $$self{rfh} if $$self{rfh};
close $$self{wfh} if $$self{wfh};
POSIX::close $$self{fd};
$$self{fd} = $$self{rfh} = $$self{wfh} = undef;
$self;#;
$Kd=bless({$o,$Id,$q,$Jd,$s,$t},$u);
$Ld={$Hd,$Kd};
$Md=q#/io/fd_gc.b#;
$Nd=bless({$L2,$Dd,$E3,$F3,$G3,$Gd,$H3,$Ld,$D,$Md},$Q3);
$Od={};
$Pd=[];
$Qd=q#my $self = shift;
open $$self{rfh}, "<&=$$self{fd}" or return undef unless $$self{rfh};
sysread $$self{rfh}, $_[0], $_[1], $_[2] || 0;#;
$Rd=bless({$o,$Pd,$q,$Qd,$s,$t},$u);
$Sd=[];
$Td=q#my $self = shift;
open $$self{wfh}, ">&=$$self{fd}" or return undef unless $$self{wfh};
syswrite $$self{wfh}, $_[0], $_[1] || length $_[0], $_[2] || 0;#;
$Ud=bless({$o,$Sd,$q,$Td,$s,$t},$u);
$Vd={$w9,$Rd,$E9,$Ud};
$Wd=q#/io/fd_perlio.b#;
$Xd=bless({$L2,$Od,$E3,$F3,$G3,$F3,$H3,$Vd,$D,$Wd},$Q3);
$Yd=[$m9,$Vc,$ed,$md,$Cd,$Nd,$Xd];
$Zd=bless({$L2,$Nc,$D,$Oc,$x3,$Yd},$S2);
$ce=q#io/fd.c::ctors#;
$de=q#ni:/io/fd.c#;
$ee={$S2,1};
$fe=q#/io/fd.c#;
$ge=[$ia];
$he=bless({$L2,$ee,$D,$fe,$x3,$ge},$y3);
$ie=q#ni:/io/fd_fcntl.b#;
$je=q#ni:/io/fd_gc.b#;
$ke=q#ni:/io/fd_init.b#;
$le=q#ni:/io/fd_perlio.b#;
$me=q#ni:/io/fd_readers.b#;
$ne=q#ni:/io/fd_shell.b#;
$oe=q#ni:/io/file#;
$pe={$R4,1};
$qe=q#/io/file#;
$re={};
$se=[];
$te=q#shift->{'name'}#;
$ue=bless({$o,$se,$q,$te,$s,$t},$u);
$ve={$D,$ue};
$we=q#/io/file_readers.b#;
$xe=bless({$L2,$re,$E3,$F3,$G3,$F3,$H3,$ve,$D,$we},$Q3);
$ye={};
$ze=q#mode#;
$Ae=[];
$Be=q#@_ == 2 ? $_[0]->{'mode'} = $_[1] : shift->{'mode'}#;
$Ce=bless({$o,$Ae,$q,$Be,$s,$t},$u);
$De={$ze,$Ce};
$Ee=q#/io/file_accessors.b#;
$Fe=bless({$L2,$ye,$E3,$F3,$G3,$F3,$H3,$De,$D,$Ee},$Q3);
$Ge={};
$He=[];
$Ie=q#my ($class, $name, $mode) = @_;
+{name => $name,
  mode => $mode || 0644,
  r    => undef,
  w    => undef};#;
$Je=bless({$o,$He,$q,$Ie,$s,$t},$u);
$Ke={$G4,$Je};
$Le=q#/io/file_init.b#;
$Me=bless({$L2,$Ge,$E3,$F3,$G3,$F3,$H3,$Ke,$D,$Le},$Q3);
$Ne={};
$Oe=[];
$Pe=q#my $self = shift;
$$self{r}->close if $$self{r};
$$self{w}->close if $$self{w};
$$self{r} = $$self{w} = undef;
$self;#;
$Qe=bless({$o,$Oe,$q,$Pe,$s,$t},$u);
$Re=q#r#;
$Se=[];
$Te=q#my $self = shift;
$$self{r} ||= ni('ni:/io/fd')->new(
  $self->io_check_defined(
    *POSIX::open, $$self{name}, POSIX::O_RDONLY));#;
$Ue=bless({$o,$Se,$q,$Te,$s,$t},$u);
$Ve=[];
$We=q#shift->r->read(@_)#;
$Xe=bless({$o,$Ve,$q,$We,$s,$t},$u);
$Ye=q#w#;
$Ze=[];
$cf=q#my $self = shift;
$$self{w} ||= ni('ni:/io/fd')->new(
  $self->io_check_defined(
    *POSIX::open, $$self{name},
      POSIX::O_WRONLY | POSIX::O_TRUNC | POSIX::O_CREAT,
      $$self{mode}));#;
$df=bless({$o,$Ze,$q,$cf,$s,$t},$u);
$ef=[];
$ff=q#shift->w->write(@_)#;
$gf=bless({$o,$ef,$q,$ff,$s,$t},$u);
$hf={$Hd,$Qe,$Re,$Ue,$w9,$Xe,$Ye,$df,$E9,$gf};
$if=q#/io/file_io.b#;
$jf=bless({$L2,$Ne,$E3,$F3,$G3,$F3,$H3,$hf,$D,$if},$Q3);
$kf=[$m9,$xe,$Fe,$Me,$jf];
$lf=bless({$L2,$pe,$D,$qe,$x3,$kf},$T2);
$mf=q#io/file.c::ctors#;
$nf=q#ni:/io/file.c#;
$of={$T2,1};
$pf=q#/io/file.c#;
$qf=[$ia];
$rf=bless({$L2,$of,$D,$pf,$x3,$qf},$y3);
$sf=q#ni:/io/file_accessors.b#;
$tf=q#ni:/io/file_init.b#;
$uf=q#ni:/io/file_io.b#;
$vf=q#ni:/io/file_readers.b#;
$wf=q#ni:/io/mio#;
$xf={$S4,1};
$yf={};
$zf=q#io#;
$Af=[];
$Bf=q#shift->{'io'}#;
$Cf=bless({$o,$Af,$q,$Bf,$s,$t},$u);
$Df=q#packet_size#;
$Ef=[];
$Ff=q#shift->{'packet_size'}#;
$Gf=bless({$o,$Ef,$q,$Ff,$s,$t},$u);
$Hf={$zf,$Cf,$Df,$Gf};
$If=q#/io/mio_ro.b#;
$Jf=bless({$L2,$yf,$E3,$F3,$G3,$F3,$H3,$Hf,$D,$If},$Q3);
$Kf={};
$Lf=[];
$Mf=q#my ($self, %args) = @_;
+{channel_capacity => $args{channel_capacity} || 65536,
  closed           => 0,
  send_index       => 0,
  read_buffers     => [],
  write_buffers    => [],
  channel_id       => 0,
  channels         => []};#;
$Nf=bless({$o,$Lf,$q,$Mf,$s,$t},$u);
$Of={$G4,$Nf};
$Pf=q#/io/mio_init.b#;
$Qf=bless({$L2,$Kf,$E3,$F3,$G3,$F3,$H3,$Of,$D,$Pf},$Q3);
$Rf={};
$Sf=q#next_sender#;
$Tf=[];
$Uf=q#my $self = shift;
my $rs   = $$self{read_buffers};
my $a    = $$self{send_index} + 1;
for (my $i = 0; $i < @$rs; ++$i) {
  my $ai = ($a + $i) % @$rs;
  return $$self{send_index} = $ai if $$rs[$ai]->read_capacity;
}
undef;#;
$Vf=bless({$o,$Tf,$q,$Uf,$s,$t},$u);
$Wf={$Sf,$Vf};
$Xf=q#/io/mio_rr_scheduler.b#;
$Yf=bless({$L2,$Rf,$E3,$F3,$G3,$F3,$H3,$Wf,$D,$Xf},$Q3);
$Zf={};
$cg=[];
$dg=q#my $self = shift;
$$self{closed} = 1;
$self;#;
$eg=bless({$o,$cg,$q,$dg,$s,$t},$u);
$fg=[];
$gg=q#my $self   = shift;
my $length = $_[1];
my $offset = $_[2] || 0;
my $total_read = 0;

while ($total_read + 8 < $length) {
  my $next_id = $self->next_sender;
  unless (defined $next_id) {
    return 0 if $$self{closed};
    $! = Errno::EWOULDBLOCK, return undef unless $total_read;
  }

  my $n = $$self{channels}[$next_id]->read(
    $_[0],
    $length - $total_read - 8,
    $offset + $total_read + 8);
  if ($n) {
    substr $_[0], $offset + $total_read, 8, pack 'NN', $next_id, $n;
    $total_read += $n + 8;
  } elsif (!defined $n) {
    return $total_read || undef;
  }
}

return $total_read if $total_read;
$! = Errno::EWOULDBLOCK;
undef;#;
$hg=bless({$o,$fg,$q,$gg,$s,$t},$u);
$ig=[];
$jg=q#my $self = shift;#;
$kg=bless({$o,$ig,$q,$jg,$s,$t},$u);
$lg={$Hd,$eg,$w9,$hg,$E9,$kg};
$mg=q#/io/mio_io.b#;
$ng=bless({$L2,$Zf,$E3,$F3,$G3,$F3,$H3,$lg,$D,$mg},$Q3);
$og={};
$pg=q#channel#;
$qg=[];
$rg=q#my $self = shift;
my $id = @_ ? shift : ++$$self{channel_id};
return $$self{channels}{$id} if exists $$self{channels}{$id};
my $c = ni('ni:/io/mio_channel')->new($self, $id);
Scalar::Util::weaken($$self{channels}{$id} = $c);
$$self{read_buffers}{$id}  = $$c{read_buffer};
$$self{write_buffers}{$id} = $$c{write_buffer};
push @{$$self{send_rr}}, $id;
$c;#;
$sg=bless({$o,$qg,$q,$rg,$s,$t},$u);
$tg=q#channels#;
$ug=[];
$vg=q#sort {$a <=> $b} keys %{shift->{channels}}#;
$wg=bless({$o,$ug,$q,$vg,$s,$t},$u);
$xg=q#unchannel#;
$yg=[];
$zg=q#my ($self, $id) = @_;
delete $$self{channels}{$id};
delete $$self{read_buffers}{$id}
  unless $$self{read_buffers}{$id}->read_capacity;
delete $$self{write_buffers}{$id}
  unless $$self{write_buffers}{$id}->write_capacity;
$$self{send_rr} = [map $_ ne $id, @{$$self{send_rr}}];
$self;#;
$Ag=bless({$o,$yg,$q,$zg,$s,$t},$u);
$Bg={$pg,$sg,$tg,$wg,$xg,$Ag};
$Cg=q#/io/mio_channel.b#;
$Dg=bless({$L2,$og,$E3,$F3,$G3,$F3,$H3,$Bg,$D,$Cg},$Q3);
$Eg=[$m9,$Jf,$Qf,$Yf,$ng,$Dg];
$Fg=bless({$L2,$xf,$D,$O1,$x3,$Eg},$U2);
$Gg=q#io/mio.c::ctors#;
$Hg=q#ni:/io/mio.c#;
$Ig={$U2,1};
$Jg=q#/io/mio.c#;
$Kg=[$ia];
$Lg=bless({$L2,$Ig,$D,$Jg,$x3,$Kg},$y3);
$Mg=q#ni:/io/mio_channel#;
$Ng={$T4,1};
$Og=q#/io/mio_channel#;
$Pg={};
$Qg=q#capacity#;
$Rg=[];
$Sg=q#shift->{'capacity'}#;
$Tg=bless({$o,$Rg,$q,$Sg,$s,$t},$u);
$Ug=q#id#;
$Vg=[];
$Wg=q#shift->{'id'}#;
$Xg=bless({$o,$Vg,$q,$Wg,$s,$t},$u);
$Yg=q#mio#;
$Zg=[];
$ch=q#shift->{'mio'}#;
$dh=bless({$o,$Zg,$q,$ch,$s,$t},$u);
$eh={$Qg,$Tg,$Ug,$Xg,$Yg,$dh};
$fh=q#/io/mio_channel_ro.b#;
$gh=bless({$L2,$Pg,$E3,$F3,$G3,$F3,$H3,$eh,$D,$fh},$Q3);
$hh={};
$ih=[];
$jh=q#my ($self, $mio, $id, $capacity) = @_;
+{mio          => $mio,
  id           => $id,
  capacity     => $capacity,
  write_buffer => ni('ni:/io/buffer')->new($capacity >> 1),
  read_buffer  => ni('ni:/io/buffer')->new($capacity >> 1)};#;
$kh=bless({$o,$ih,$q,$jh,$s,$t},$u);
$lh={$G4,$kh};
$mh=q#/io/mio_channel_init.b#;
$nh=bless({$L2,$hh,$E3,$F3,$G3,$F3,$H3,$lh,$D,$mh},$Q3);
$oh={};
$ph=[];
$qh=q#my $self = shift;
$$self{mio}->unchannel($$self{channel_id});#;
$rh=bless({$o,$ph,$q,$qh,$s,$t},$u);
$sh={};
$th=q#/io/mio_channel_lifecycle.b#;
$uh=bless({$L2,$oh,$E3,$F3,$G3,$rh,$H3,$sh,$D,$th},$Q3);
$vh={};
$wh=[];
$xh=q#shift->{read_buffer} ->read(@_)#;
$yh=bless({$o,$wh,$q,$xh,$s,$t},$u);
$zh=[];
$Ah=q#shift->{write_buffer}->write(@_)#;
$Bh=bless({$o,$zh,$q,$Ah,$s,$t},$u);
$Ch={$w9,$yh,$E9,$Bh};
$Dh=q#/io/mio_channel_io.b#;
$Eh=bless({$L2,$vh,$E3,$F3,$G3,$F3,$H3,$Ch,$D,$Dh},$Q3);
$Fh=[$m9,$gh,$nh,$uh,$Eh];
$Gh=bless({$L2,$Ng,$D,$Og,$x3,$Fh},$V2);
$Hh=q#io/mio_channel.c::ctors#;
$Ih=q#ni:/io/mio_channel.b#;
$Jh=q#ni:/io/mio_channel.c#;
$Kh={$V2,1};
$Lh=q#/io/mio_channel.c#;
$Mh=[$ia];
$Nh=bless({$L2,$Kh,$D,$Lh,$x3,$Mh},$y3);
$Oh=q#ni:/io/mio_channel_init.b#;
$Ph=q#ni:/io/mio_channel_io.b#;
$Qh=q#ni:/io/mio_channel_lifecycle.b#;
$Rh=q#ni:/io/mio_channel_ro.b#;
$Sh=q#ni:/io/mio_init.b#;
$Th=q#ni:/io/mio_io.b#;
$Uh=q#ni:/io/mio_ro.b#;
$Vh=q#ni:/io/mio_rr_scheduler.b#;
$Wh=q#ni:/io/named_io_fns.b#;
$Xh={};
$Yh=q#fcntl#;
$Zh=[];
$ci=q#CORE::fcntl $_[0], $_[1], $_[2]#;
$di=bless({$o,$Zh,$q,$ci,$s,$t},$u);
$ei=[];
$fi=q#CORE::fork#;
$gi=bless({$o,$ei,$q,$fi,$s,$t},$u);
$hi=q#open2#;
$ii=[];
$ji=q#CORE::open $_[0], $_[1]#;
$ki=bless({$o,$ii,$q,$ji,$s,$t},$u);
$li=q#waitpid#;
$mi=[];
$ni=q#CORE::waitpid $_[0], $_[1]#;
$oi=bless({$o,$mi,$q,$ni,$s,$t},$u);
$pi={$Yh,$di,$nc,$gi,$hi,$ki,$li,$oi};
$qi=q#/io/named_io_fns.b#;
$ri=bless({$L2,$Xh,$E3,$F3,$G3,$F3,$H3,$pi,$D,$qi},$Q3);
$si=q#main#;
$ti=q#ni:/io/null#;
$ui={$U4,1};
$vi=q#/io/null#;
$wi={};
$xi=[];
$yi=q#+{fd => undef}#;
$zi=bless({$o,$xi,$q,$yi,$s,$t},$u);
$Ai={$G4,$zi};
$Bi=q#/io/null_init.b#;
$Ci=bless({$L2,$wi,$E3,$F3,$G3,$F3,$H3,$Ai,$D,$Bi},$Q3);
$Di={};
$Ei=[];
$Fi=q#my $self = shift;
$$self{fd} ||= ni('ni:/io/fd')->new(
  $self->io_check_defined(*POSIX::open, '/dev/null', POSIX::O_RDWR));#;
$Gi=bless({$o,$Ei,$q,$Fi,$s,$t},$u);
$Hi=[];
$Ii=q#shift->fd->read(@_)#;
$Ji=bless({$o,$Hi,$q,$Ii,$s,$t},$u);
$Ki=[];
$Li=q#shift->fd->write(@_)#;
$Mi=bless({$o,$Ki,$q,$Li,$s,$t},$u);
$Ni={$Fb,$Gi,$w9,$Ji,$E9,$Mi};
$Oi=q#/io/null_io.b#;
$Pi=bless({$L2,$Di,$E3,$F3,$G3,$F3,$H3,$Ni,$D,$Oi},$Q3);
$Qi=[$m9,$Ci,$Pi];
$Ri=bless({$L2,$ui,$D,$vi,$x3,$Qi},$W2);
$Si=q#io/null.c::ctors#;
$Ti=q#ni:/io/null.c#;
$Ui={$W2,1};
$Vi=q#/io/null.c#;
$Wi=[$ia];
$Xi=bless({$L2,$Ui,$D,$Vi,$x3,$Wi},$y3);
$Yi=q#ni:/io/null_init.b#;
$Zi=q#ni:/io/null_io.b#;
$cj=q#ni:/io/object#;
$dj=q#ni:/io/object.c#;
$ej=q#ni:/io/object.c_transfer_def.b#;
$fj=q#ni:/io/object_checks.b#;
$gj=q#ni:/io/object_constructors.b#;
$hj=q#ni:/io/object_memory.b#;
$ij=q#ni:/io/object_ops.b#;
$jj=q#ni:/io/object_transfer_async.b#;
$kj=q#ni:/io/object_transfer_sync.b#;
$lj=q#ni:/io/pid#;
$mj={$W4,1};
$nj={};
$oj=q#pid#;
$pj=[];
$qj=q#shift->{'pid'}#;
$rj=bless({$o,$pj,$q,$qj,$s,$t},$u);
$sj=q#status#;
$tj=[];
$uj=q#shift->{'status'}#;
$vj=bless({$o,$tj,$q,$uj,$s,$t},$u);
$wj={$oj,$rj,$sj,$vj};
$xj=q#/io/pid_readers.b#;
$yj=bless({$L2,$nj,$E3,$F3,$G3,$F3,$H3,$wj,$D,$xj},$Q3);
$zj={};
$Aj=[];
$Bj=q#shift->await#;
$Cj=bless({$o,$Aj,$q,$Bj,$s,$t},$u);
$Dj=[];
$Ej=q#my ($class, $pid, $argv, $env, %external_fds) = @_;
+{pid          => $pid,
  argv         => $argv,
  env          => $env,
  external_fds => \\%external_fds,
  status       => undef};#;
$Fj=bless({$o,$Dj,$q,$Ej,$s,$t},$u);
$Gj={$G4,$Fj};
$Hj=q#/io/pid_init.b#;
$Ij=bless({$L2,$zj,$E3,$F3,$G3,$Cj,$H3,$Gj,$D,$Hj},$Q3);
$Jj={};
$Kj=q#await#;
$Lj=[];
$Mj=q#my $self = shift;
return $$self{status} if defined $$self{status};
$self->io_check_defined(*main::waitpid, $$self{pid}, 0);
$$self{status} = $?;#;
$Nj=bless({$o,$Lj,$q,$Mj,$s,$t},$u);
$Oj=q#running#;
$Pj=[];
$Qj=q#not defined $_[0]->{status} and kill 0, $_[0]->{pid}#;
$Rj=bless({$o,$Pj,$q,$Qj,$s,$t},$u);
$Sj={$Kj,$Nj,$Oj,$Rj};
$Tj=q#/io/pid_wait.b#;
$Uj=bless({$L2,$Jj,$E3,$F3,$G3,$F3,$H3,$Sj,$D,$Tj},$Q3);
$Vj={};
$Wj=[];
$Xj=q#shift->stdout->read(@_)#;
$Yj=bless({$o,$Wj,$q,$Xj,$s,$t},$u);
$Zj=[];
$ck=q#shift->stdin->write(@_)#;
$dk=bless({$o,$Zj,$q,$ck,$s,$t},$u);
$ek={$w9,$Yj,$E9,$dk};
$fk=q#/io/pid_io.b#;
$gk=bless({$L2,$Vj,$E3,$F3,$G3,$F3,$H3,$ek,$D,$fk},$Q3);
$hk={};
$ik=[];
$jk=q#$_[0]->{external_fds}{$_[1]}#;
$kk=bless({$o,$ik,$q,$jk,$s,$t},$u);
$lk=[];
$mk=q#shift->fd(2)#;
$nk=bless({$o,$lk,$q,$mk,$s,$t},$u);
$ok=[];
$pk=q#shift->fd(0)#;
$qk=bless({$o,$ok,$q,$pk,$s,$t},$u);
$rk=[];
$sk=q#shift->fd(1)#;
$tk=bless({$o,$rk,$q,$sk,$s,$t},$u);
$uk={$Fb,$kk,$Jb,$nk,$Nb,$qk,$Rb,$tk};
$vk=q#/io/pid_accessors.b#;
$wk=bless({$L2,$hk,$E3,$F3,$G3,$F3,$H3,$uk,$D,$vk},$Q3);
$xk=[$m9,$yj,$Ij,$Uj,$gk,$wk];
$yk=bless({$L2,$mj,$D,$g2,$x3,$xk},$Y2);
$zk=q#io/pid.c::ctors#;
$Ak=q#ni:/io/pid.c#;
$Bk={$Y2,1};
$Ck=q#/io/pid.c#;
$Dk=[$ia];
$Ek=bless({$L2,$Bk,$D,$Ck,$x3,$Dk},$y3);
$Fk=q#ni:/io/pid_accessors.b#;
$Gk=q#ni:/io/pid_init.b#;
$Hk=q#ni:/io/pid_io.b#;
$Ik=q#ni:/io/pid_readers.b#;
$Jk=q#ni:/io/pid_wait.b#;
$Kk=q#ni:/io/str#;
$Lk={$X4,1};
$Mk=q#/io/str#;
$Nk={};
$Ok=q#data#;
$Pk=[];
$Qk=q#shift->{'data'}#;
$Rk=bless({$o,$Pk,$q,$Qk,$s,$t},$u);
$Sk=q#end#;
$Tk=[];
$Uk=q#shift->{'end'}#;
$Vk=bless({$o,$Tk,$q,$Uk,$s,$t},$u);
$Wk=q#start#;
$Xk=[];
$Yk=q#shift->{'start'}#;
$Zk=bless({$o,$Xk,$q,$Yk,$s,$t},$u);
$cl={$Ok,$Rk,$Sk,$Vk,$Wk,$Zk};
$dl=q#/io/str_ro.b#;
$el=bless({$L2,$Nk,$E3,$F3,$G3,$F3,$H3,$cl,$D,$dl},$Q3);
$fl={};
$gl=[];
$hl=q#my $class = shift;
+{data  => \\$_[0],
  start => $_[1] || 0,
  end   => $_[2] || length $_[0]};#;
$il=bless({$o,$gl,$q,$hl,$s,$t},$u);
$jl={$G4,$il};
$kl=q#/io/str_init.b#;
$ll=bless({$L2,$fl,$E3,$F3,$G3,$F3,$H3,$jl,$D,$kl},$Q3);
$ml={};
$nl=[];
$ol=q#my $self = shift;
return 0 if $$self{start} >= $$self{end};
my $l = @_ >= 2 ? ni::min($self->remaining, $_[1]) : $self->remaining;
if (@_ == 3) {
  substr($_[0], $_[2] || 0, $l, substr(${$$self{data}}, $$self{start}, $l));
} else {
  $_[0] = substr ${$$self{data}}, $$self{start}, $l;
}
$$self{start} += $l;
$l;#;
$pl=bless({$o,$nl,$q,$ol,$s,$t},$u);
$ql=q#remaining#;
$rl=[];
$sl=q#my $self = shift; $$self{end} - $$self{start}#;
$tl=bless({$o,$rl,$q,$sl,$s,$t},$u);
$ul=[];
$vl=q#my $self = shift;
${$$self{data}} .= $_[0];
$$self{start} += length $_[0];
$$self{end} = length ${$$self{data}};
length $_[0];#;
$wl=bless({$o,$ul,$q,$vl,$s,$t},$u);
$xl={$w9,$pl,$ql,$tl,$E9,$wl};
$yl=q#/io/str_io.b#;
$zl=bless({$L2,$ml,$E3,$F3,$G3,$F3,$H3,$xl,$D,$yl},$Q3);
$Al=[$m9,$el,$ll,$zl];
$Bl=bless({$L2,$Lk,$D,$Mk,$x3,$Al},$Z2);
$Cl=q#io/str.c::ctors#;
$Dl=q#ni:/io/str.c#;
$El={$Z2,1};
$Fl=q#/io/str.c#;
$Gl=[$ia];
$Hl=bless({$L2,$El,$D,$Fl,$x3,$Gl},$y3);
$Il=q#ni:/io/str_init.b#;
$Jl=q#ni:/io/str_io.b#;
$Kl=q#ni:/io/str_ro.b#;
$Ll=q#ni:/io/transfer#;
$Ml={$Y4,1,$Z4,1,$c5,1};
$Nl=q#/io/transfer#;
$Ol={$Y4,1,$Z4,1,$c5,1,$k5,1};
$Pl=q#/semantic/task#;
$Ql={};
$Rl=q#outcome#;
$Sl=[];
$Tl=q#shift->{'outcome'}#;
$Ul=bless({$o,$Sl,$q,$Tl,$s,$t},$u);
$Vl={$Rl,$Ul};
$Wl=q#/semantic/task_ro.b#;
$Xl=bless({$L2,$Ql,$E3,$F3,$G3,$F3,$H3,$Vl,$D,$Wl},$Q3);
$Yl={};
$Zl=q#failure#;
$cm=[];
$dm=q#my $self = shift;
$$self{outcome} = [0, @_];
$self->die($_[0]);#;
$em=bless({$o,$cm,$q,$dm,$s,$t},$u);
$fm=q#success#;
$gm=[];
$hm=q#my $self = shift;
$$self{outcome} = [1, @_];
$self;#;
$im=bless({$o,$gm,$q,$hm,$s,$t},$u);
$jm={$Zl,$em,$fm,$im};
$km=q#/semantic/task_outcome.b#;
$lm=bless({$L2,$Yl,$E3,$F3,$G3,$F3,$H3,$jm,$D,$km},$Q3);
$mm=[$u5,$Xl,$lm];
$nm=bless({$L2,$Ol,$D,$Pl,$x3,$mm},$v3);
$om=q#semantic/task.c::ctors#;
$pm={};
$qm=[];
$rm=q#my $self = shift;
@$self{qw/read_bytes read_time write_bytes write_time/} = (0, 0, 0, 0);#;
$sm=bless({$o,$qm,$q,$rm,$s,$t},$u);
$tm=[];
$um=q#my $self = shift;
my $start_time = time;
my $n = $$self{source_io}->read(@_);
my $end_time = time;
$$self{start_time} ||= $start_time;
$$self{read_bytes} += $n if defined $n;
$$self{read_time} += $end_time - $start_time;
$n;#;
$vm=bless({$o,$tm,$q,$um,$s,$t},$u);
$wm=[];
$xm=q#my $self = shift;
my $start_time = time;
my $n = $$self{dest_io}->write(@_);
my $end_time = time;
$$self{write_bytes} += $n if defined $n;
$$self{write_time} += $end_time - $start_time;
$n;#;
$ym=bless({$o,$wm,$q,$xm,$s,$t},$u);
$zm={$w9,$vm,$E9,$ym};
$Am=q#/io/transfer_io_interop.b#;
$Bm=bless({$L2,$pm,$E3,$sm,$G3,$F3,$H3,$zm,$D,$Am},$Q3);
$Cm={};
$Dm=q#pressure#;
$Em=[];
$Fm=q#my $self = shift;
my $in_impedance  = log($$self{read_time}  || 1);
my $out_impedance = log($$self{write_time} || 1);
($out_impedance - $in_impedance) / log 20;#;
$Gm=bless({$o,$Em,$q,$Fm,$s,$t},$u);
$Hm=q#read_limit_throughput#;
$Im=[];
$Jm=q#my $self = shift;
$$self{read_bytes} / ($$self{read_time} || 1);#;
$Km=bless({$o,$Im,$q,$Jm,$s,$t},$u);
$Lm=q#throughput#;
$Mm=[];
$Nm=q#my $self = shift;
my $end_time = $$self{end_time} || time;
my $dt       = $end_time - $$self{start_time} || 1;
$$self{write_bytes} / $dt;#;
$Om=bless({$o,$Mm,$q,$Nm,$s,$t},$u);
$Pm=q#write_limit_throughput#;
$Qm=[];
$Rm=q#my $self = shift;
$$self{write_bytes} / ($$self{write_time} || 1);#;
$Sm=bless({$o,$Qm,$q,$Rm,$s,$t},$u);
$Tm={$Dm,$Gm,$Hm,$Km,$Lm,$Om,$Pm,$Sm};
$Um=q#/io/transfer_io_measurement.b#;
$Vm=bless({$L2,$Cm,$E3,$F3,$G3,$F3,$H3,$Tm,$D,$Um},$Q3);
$Wm=[$nm,$Bm,$Vm];
$Xm=bless({$L2,$Ml,$D,$Nl,$x3,$Wm},$c3);
$Ym=q#io/transfer.c::ctors#;
$Zm=q#ni:/io/transfer.c#;
$cn={$c3,1,$d3,1,$e3,1};
$dn=q#/io/transfer.c#;
$en={$c3,1,$d3,1,$e3,1,$v3,1};
$fn=q#/semantic/task.c#;
$gn=[$h7];
$hn=bless({$L2,$en,$D,$fn,$x3,$gn},$y3);
$in={};
$jn=[];
$kn=q#my $self = shift;
ni('ni:/io/object')->def_transfer_method($self, $1)
  if $self->name =~ /transfer_(\\w+)$/;#;
$ln=bless({$o,$jn,$q,$kn,$s,$t},$u);
$mn={};
$nn=q#/io/transfer.c_into.b#;
$on=bless({$L2,$in,$E3,$ln,$G3,$F3,$H3,$mn,$D,$nn},$Q3);
$pn=[$hn,$on];
$qn=bless({$L2,$cn,$D,$dn,$x3,$pn},$y3);
$rn=q#ni:/io/transfer.c_into.b#;
$sn=q#ni:/io/transfer_async#;
$tn={$Z4,1};
$un=q#/io/transfer_async#;
$vn={};
$wn=q#dest_io#;
$xn=[];
$yn=q#shift->{'dest_io'}#;
$zn=bless({$o,$xn,$q,$yn,$s,$t},$u);
$An=[];
$Bn=bless({$o,$An,$q,$Wg,$s,$t},$u);
$Cn=q#source_io#;
$Dn=[];
$En=q#shift->{'source_io'}#;
$Fn=bless({$o,$Dn,$q,$En,$s,$t},$u);
$Gn={$wn,$zn,$Ug,$Bn,$Cn,$Fn};
$Hn=q#/io/transfer_async_ro.b#;
$In=bless({$L2,$vn,$E3,$F3,$G3,$F3,$H3,$Gn,$D,$Hn},$Q3);
$Jn={};
$Kn=[];
$Ln=q#my ($class, $source, $dest) = @_;
$source->nonblock(1) if $source->can('nonblock');
$dest  ->nonblock(1) if $dest  ->can('nonblock');
+{source_io => $source,
  dest_io   => $dest,
  pending   => '',
  outcome   => undef,
  id        => $class->new_id};#;
$Mn=bless({$o,$Kn,$q,$Ln,$s,$t},$u);
$Nn={$G4,$Mn};
$On=q#/io/transfer_async_init.b#;
$Pn=bless({$L2,$Jn,$E3,$F3,$G3,$F3,$H3,$Nn,$D,$On},$Q3);
$Qn={};
$Rn=[];
$Sn=q#ni('ni:/io/transfer_async')->track(shift)#;
$Tn=bless({$o,$Rn,$q,$Sn,$s,$t},$u);
$Un=[];
$Vn=q#ni('ni:/io/transfer_async')->untrack(shift->{id})#;
$Wn=bless({$o,$Un,$q,$Vn,$s,$t},$u);
$Xn={};
$Yn=q#/io/transfer_async_lifecycle.b#;
$Zn=bless({$L2,$Qn,$E3,$Tn,$G3,$Wn,$H3,$Xn,$D,$Yn},$Q3);
$co={};
$do=q#run#;
$eo=[];
$fo=q#shift#;
$go=bless({$o,$eo,$q,$fo,$s,$t},$u);
$ho=q#run_async#;
$io=[];
$jo=q#my $self = shift;
my $n;

\# Step one: write everything in the pending queue, if possible. Invariant
\# after this if() condition is that $$self{pending} is empty unless there
\# was something preventing IO.
if (length $$self{pending}) {
write_branch:
  $n = 0;
  while ($n < length $$self{pending}) {
    my $x = $self->write($n ? substr($$self{pending}, $n)
                            : $$self{pending});
    last unless defined $x;
    $n += $x;
  }
  $$self{pending} = substr $$self{pending}, $n;
}

\# Step two: load more data into $$self{pending} and, if successful, go
\# back to step one and write it.
unless (length $$self{pending}) {
  goto write_branch if $n = $self->read($$self{pending}, 32768);
  return $self if $!{EINTR} || $!{EAGAIN} || $!{EWOULDBLOCK};
  if (defined $n) {
    $$self{end_time} = time;
    return $self->success;
  } else {
    $self->failure($!);
  }
}

$self;#;
$ko=bless({$o,$io,$q,$jo,$s,$t},$u);
$lo={$do,$go,$ho,$ko};
$mo=q#/io/transfer_async_run.b#;
$no=bless({$L2,$co,$E3,$F3,$G3,$F3,$H3,$lo,$D,$mo},$Q3);
$oo=[$Xm,$In,$Pn,$Zn,$no];
$po=q#tracked_transfers#;
$qo={};
$ro=bless({$L2,$tn,$D,$un,$x3,$oo,$po,$qo},$d3);
$so=q#io/transfer_async.c::ctors#;
$to=q#ni:/io/transfer_async.c#;
$uo={$d3,1};
$vo=q#/io/transfer_async.c#;
$wo={};
$xo=[];
$yo=q#shift->{tracked_transfers} = {}#;
$zo=bless({$o,$xo,$q,$yo,$s,$t},$u);
$Ao=q#track#;
$Bo=[];
$Co=q#my ($self, $transfer) = @_;
Scalar::Util::weaken($$self{tracked_transfers}{$transfer->id} = $transfer);
$self;#;
$Do=bless({$o,$Bo,$q,$Co,$s,$t},$u);
$Eo=q#untrack#;
$Fo=[];
$Go=q#my ($self, $id) = @_;
delete $$self{tracked_transfers}{$id};
$self;#;
$Ho=bless({$o,$Fo,$q,$Go,$s,$t},$u);
$Io={$Ao,$Do,$Eo,$Ho};
$Jo=q#/io/transfer_async.c_tracker.b#;
$Ko=bless({$L2,$wo,$E3,$zo,$G3,$F3,$H3,$Io,$D,$Jo},$Q3);
$Lo=[$qn,$Ko];
$Mo=bless({$L2,$uo,$D,$vo,$x3,$Lo},$y3);
$No=q#ni:/io/transfer_async.c_tracker.b#;
$Oo=q#ni:/io/transfer_async_init.b#;
$Po=q#ni:/io/transfer_async_lifecycle.b#;
$Qo=q#ni:/io/transfer_async_ro.b#;
$Ro=q#ni:/io/transfer_async_run.b#;
$So=q#ni:/io/transfer_io_interop.b#;
$To=q#ni:/io/transfer_io_measurement.b#;
$Uo=q#ni:/io/transfer_sync#;
$Vo={$c5,1};
$Wo=q#/io/transfer_sync#;
$Xo={};
$Yo=[];
$Zo=q#my ($class, $source, $dest) = @_;
+{source_io => $source,
  dest_io   => $dest};#;
$cp=bless({$o,$Yo,$q,$Zo,$s,$t},$u);
$dp={$G4,$cp};
$ep=q#/io/transfer_sync_init.b#;
$fp=bless({$L2,$Xo,$E3,$F3,$G3,$F3,$H3,$dp,$D,$ep},$Q3);
$gp={};
$hp=[];
$ip=q#my $self = shift;
my $buf;
my $r;
while (($r = $self->read($buf, 32768)) || $!{EINTR}) {
  my $n = $self->write($buf);
  $self->failure($!) unless $n || $!{EINTR};
  while ($n < $r) {
    my $n0 = $self->write($buf, $r - $n, $n);
    $self->failure($!) unless $!{EINTR} || $n0;
    $n += $n0 || 0;
  }
}
$$self{end_time} = time;
$self->success;#;
$jp=bless({$o,$hp,$q,$ip,$s,$t},$u);
$kp={$do,$jp};
$lp=q#/io/transfer_sync_run.b#;
$mp=bless({$L2,$gp,$E3,$F3,$G3,$F3,$H3,$kp,$D,$lp},$Q3);
$np=[$Xm,$fp,$mp];
$op=bless({$L2,$Vo,$D,$Wo,$x3,$np},$e3);
$pp=q#io/transfer_sync.c::ctors#;
$qp=q#ni:/io/transfer_sync.c#;
$rp={$e3,1};
$sp=q#/io/transfer_sync.c#;
$tp=[$qn];
$up=bless({$L2,$rp,$D,$sp,$x3,$tp},$y3);
$vp=q#ni:/io/transfer_sync_init.b#;
$wp=q#ni:/io/transfer_sync_run.b#;
$xp=q#ni:/lib/accessor.b#;
$yp=q#ni:/lib/behavior#;
$zp=q#ni:/lib/behavior.c#;
$Ap=q#ni:/lib/branch#;
$Bp={$S3,1};
$Cp=q#/lib/branch#;
$Dp={};
$Ep=q#local $_;
my $class = shift;
my $name  = shift;
+{name       => $name,
  applied_to => {},
  slices     => [map $class->resolve($_), @_]};#;
$Fp=bless({$q,$Ep,$s,$t},$u);
$Gp={$G4,$Fp};
$Hp=q#/lib/branch_init.b#;
$Ip=bless({$L2,$Dp,$E3,$F3,$G3,$F3,$H3,$Gp,$D,$Hp},$Q3);
$Jp=[$F5,$d4,$R3,$Ip,$y6];
$Kp=bless({$L2,$Bp,$D,$Cp,$x3,$Jp},$g3);
$Lp=q#lib/branch.c::ctors#;
$Mp=q#ni:/lib/branch.b#;
$Np=q#ni:/lib/branch.c#;
$Op={$g3,1};
$Pp=q#/lib/branch.c#;
$Qp=[$m7];
$Rp=bless({$L2,$Op,$D,$Pp,$x3,$Qp},$y3);
$Sp=q#ni:/lib/branch_init.b#;
$Tp=q#ni:/lib/class_init.b#;
$Up=q#ni:/lib/dataslice#;
$Vp={$e5,1};
$Wp=q#/lib/dataslice#;
$Xp={};
$Yp=q#my $class = shift;
my $name = shift;
+{name => $name, data => {@_}};#;
$Zp=bless({$q,$Yp,$s,$t},$u);
$cq={$G4,$Zp};
$dq=q#/lib/dataslice_init.b#;
$eq=bless({$L2,$Xp,$E3,$F3,$G3,$F3,$H3,$cq,$D,$dq},$Q3);
$fq={};
$gq=q#local $_;
my ($self, $p) = @_;
$p = $p->package if ref $p;
return if $$self{applied_to}{$p};
$$self{applied_to}{$p} = 1;
*{"$p\\::$_"} = $$self{data}{$_} for keys %{$$self{data}};
$self;#;
$hq=bless({$q,$gq,$s,$t},$u);
$iq={$L3,$hq};
$jq=q#/lib/dataslice_apply.b#;
$kq=bless({$L2,$fq,$E3,$F3,$G3,$F3,$H3,$iq,$D,$jq},$Q3);
$lq=[$F5,$eq,$kq];
$mq=bless({$L2,$Vp,$D,$Wp,$x3,$lq},$h3);
$nq=q#lib/dataslice.c::ctors#;
$oq=q#ni:/lib/dataslice.c#;
$pq={$h3,1};
$qq=q#/lib/dataslice.c#;
$rq=[$m7];
$sq=bless({$L2,$pq,$D,$qq,$x3,$rq},$y3);
$tq=q#ni:/lib/dataslice_apply.b#;
$uq=q#ni:/lib/dataslice_init.b#;
$vq=q#ni:/lib/definition.b#;
$wq=q#ni:/lib/definition_def.b#;
$xq=q#ni:/lib/definition_defdata.b#;
$yq=q#ni:/lib/doc#;
$zq={$F,1};
$Aq={};
$Bq=q#shift; +{name => shift, doc => []}#;
$Cq=bless({$q,$Bq,$s,$t},$u);
$Dq={$G4,$Cq};
$Eq=q#/lib/doc_init.b#;
$Fq=bless({$L2,$Aq,$E3,$F3,$G3,$F3,$H3,$Dq,$D,$Eq},$Q3);
$Gq={};
$Hq=q#'ni.doc'#;
$Iq=bless({$q,$Hq,$s,$t},$u);
$Jq={$g4,$Iq};
$Kq=q#/lib/doc_namespace.b#;
$Lq=bless({$L2,$Gq,$E3,$F3,$G3,$F3,$H3,$Jq,$D,$Kq},$Q3);
$Mq={};
$Nq=q#AUTOLOAD#;
$Oq=q#my $self = shift;
(my $method = ${__PACKAGE__ . "::AUTOLOAD"}) =~ s/^.*:://;
push @{$$self{doc}}, [$method, @_];
$self;#;
$Pq=bless({$q,$Oq,$s,$t},$u);
$Qq={$Nq,$Pq};
$Rq=q#/lib/doc_define.b#;
$Sq=bless({$L2,$Mq,$E3,$F3,$G3,$F3,$H3,$Qq,$D,$Rq},$Q3);
$Tq={};
$Uq=q#my $self = shift;
push @{$$self{doc}}, [eg => $_] for @_;
$self;#;
$Vq=bless({$q,$Uq,$s,$t},$u);
$Wq=q#tests#;
$Xq=q#\# TODO: not even close to the right way to do this.
my $self = shift;
my @flattened = map @$_, @{$$self{doc}};
my @tests;
return () unless @flattened;
for (0..$\#flattened - 1) {
  push @tests, $flattened[$_ + 1]
    if !ref $flattened[$_] && $flattened[$_] eq 'eg';
}
@tests;#;
$Yq=bless({$q,$Xq,$s,$t},$u);
$Zq={$n,$Vq,$Wq,$Yq};
$cr=q#/lib/doc_test.b#;
$dr=bless({$L2,$Tq,$E3,$F3,$G3,$F3,$H3,$Zq,$D,$cr},$Q3);
$er=[$u5,$d4,$Fq,$Lq,$Sq,$dr];
$fr=bless({$L2,$zq,$D,$C2,$x3,$er},$i3);
$gr=q#lib/doc.c::ctors#;
$hr=q#ni:/lib/doc.c#;
$ir={$i3,1};
$jr=q#/lib/doc.c#;
$kr=[$h7];
$lr=bless({$L2,$ir,$D,$jr,$x3,$kr},$y3);
$mr=q#ni:/lib/doc_define.b#;
$nr=q#ni:/lib/doc_init.b#;
$or=q#ni:/lib/doc_namespace.b#;
$pr=q#ni:/lib/doc_test.b#;
$qr=q#ni:/lib/documentable.b#;
$rr=q#ni:/lib/fn#;
$sr={$u,1};
$tr=q#/lib/fn#;
$ur={};
$vr=q#shift->compile#;
$wr=bless({$q,$vr,$s,$t},$u);
$xr=q#compile#;
$yr=q#local $@;
my $self = shift;
$$self{proto} ||= '';
$$self{fn} = ni::eval "sub $$self{proto} {$$self{code}\\n}";
die "ni:/lib/fn: failed to compile $$self{code}: $@" if $@;
$$self{fn};#;
$zr=bless({$q,$yr,$s,$t},$u);
$Ar=q#my $class = shift;
my $code  = pop;
my $proto = @_ && $_[-1] =~ /^\\(/ ? pop : '';
+{code        => $code,
  proto       => $proto,
  annotations => [@_]};#;
$Br=bless({$q,$Ar,$s,$t},$u);
$Cr={$xr,$zr,$G4,$Br};
$Dr=q#/lib/fn_init.b#;
$Er=bless({$L2,$ur,$E3,$wr,$G3,$F3,$H3,$Cr,$D,$Dr},$Q3);
$Fr={};
$Gr=[];
$Hr=q#shift->{'annotations'}#;
$Ir=bless({$o,$Gr,$q,$Hr,$s,$t},$u);
$Jr=[];
$Kr=q#shift->{'code'}#;
$Lr=bless({$o,$Jr,$q,$Kr,$s,$t},$u);
$Mr=q#fn#;
$Nr=[];
$Or=q#shift->{'fn'}#;
$Pr=bless({$o,$Nr,$q,$Or,$s,$t},$u);
$Qr={$o,$Ir,$q,$Lr,$Mr,$Pr};
$Rr=q#/lib/fn_ro.b#;
$Sr=bless({$L2,$Fr,$E3,$F3,$G3,$F3,$H3,$Qr,$D,$Rr},$Q3);
$Tr={};
$Ur=[];
$Vr=q#shift->{code}#;
$Wr=bless({$o,$Ur,$q,$Vr,$s,$t},$u);
$Xr=[];
$Yr=q#ref($_[0]) eq ref($_[1])
  and Scalar::Util::refaddr($_[0]) == Scalar::Util::refaddr($_[1])#;
$Zr=bless({$o,$Xr,$q,$Yr,$s,$t},$u);
$cs={$d6,$Wr,$k6,$Zr};
$ds=q#/lib/fn_ops.b#;
$es=bless({$L2,$Tr,$E3,$F3,$G3,$F3,$H3,$cs,$D,$ds},$Q3);
$fs={};
$gs=q#serialize#;
$hs=[];
$is=q#local $_;
my ($self, $quote) = @_;
$quote->quote_class(ref $self);

(my $code = $$self{code}) =~ s/^\\s*\\n|\\s*$//g;
my @lines = split /\\n/, $code;
my $spaces = length $code;
for (@lines) {
  $spaces = length $1 if /^([ \\t]*)\\S/ && length $1 < $spaces;
}
$spaces = ' ' x $spaces;
s/^$spaces// for @lines;

my %state = %$self;
delete $state{fn};
$state{code} = join "\\n", @lines;
$quote->quote_blessed(\\%state, ref $self);#;
$js=bless({$o,$hs,$q,$is,$s,$t},$u);
$ks={$gs,$js};
$ls=q#/lib/fn_serialize.b#;
$ms=bless({$L2,$fs,$E3,$F3,$G3,$F3,$H3,$ks,$D,$ls},$Q3);
$ns=[$u5,$M6,$Er,$Sr,$es,$ms];
$os=bless({$L2,$sr,$D,$tr,$x3,$ns},$j3);
$ps=q#lib/fn.c::ctors#;
$qs=q#ni:/lib/fn.c#;
$rs={$j3,1};
$ss=q#/lib/fn.c#;
$ts=[$h7];
$us=bless({$L2,$rs,$D,$ss,$x3,$ts},$y3);
$vs=q#ni:/lib/fn_init.b#;
$ws=q#ni:/lib/fn_ops.b#;
$xs=q#ni:/lib/fn_ro.b#;
$ys=q#ni:/lib/fn_serialize.b#;
$zs=q#ni:/lib/gensym_generator_compact.b#;
$As={};
$Bs=q#gensym#;
$Cs=[];
$Ds=q#my $n = shift->{gensym_n}++;
my $s = '$' .
  substr "cdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
         $n % 50, 1;
$n = int $n / 50;
while ($n) {
  $s .= substr "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_",
               $n % 63, 1;
  $n = int $n / 63;
}
$s;#;
$Es=bless({$o,$Cs,$q,$Ds,$s,$t},$u);
$Fs={$Bs,$Es};
$Gs=q#/lib/gensym_generator_compact.b#;
$Hs=bless({$L2,$As,$E3,$F3,$G3,$F3,$H3,$Fs,$D,$Gs},$Q3);
$Is=q#ni:/lib/global_static_test.b#;
$Js={};
$Ks=q#now#;
$Ls=[];
$Ms=q#ni('ni:/lib/test_value')->new(shift)#;
$Ns=q#($)#;
$Os=bless({$o,$Ls,$q,$Ms,$s,$Ns},$u);
$Ps={$Ks,$Os};
$Qs=q#/lib/global_static_test.b#;
$Rs=bless({$L2,$Js,$E3,$F3,$G3,$F3,$H3,$Ps,$D,$Qs},$Q3);
$Ss=q#ni:/lib/image#;
$Ts={$f5,1};
$Us=q#/lib/image#;
$Vs={};
$Ws=[];
$Xs=q#+{gensym_n     => 0,
  circular     => [],
  definitions  => {},
  objects      => {},
  side_effects => [],
  finalizers   => [],
  visited      => {},
  ordering     => []};#;
$Ys=bless({$o,$Ws,$q,$Xs,$s,$t},$u);
$Zs={$G4,$Ys};
$ct=q#/lib/image_init.b#;
$dt=bless({$L2,$Vs,$E3,$F3,$G3,$F3,$H3,$Zs,$D,$ct},$Q3);
$et={};
$ft=q#address#;
$gt=[];
$ht=q#return 'undef' unless defined $_[1];
return "id:$_[1]" if !ref $_[1] && length $_[1] < 256;
"addr:" . Scalar::Util::refaddr(ref $_[1] ? $_[1] : \\$_[1]);#;
$it=bless({$o,$gt,$q,$ht,$s,$t},$u);
$jt=q#allocate_gensym#;
$kt=[];
$lt=q#my $self = shift;
my $a = $self->address(shift);
return $$self{visited}{$a} if $_[0] =~ /^\\$\\w+$/;
my $g = $$self{visited}{$a} = $self->gensym;
$$self{definitions}{$g} = "$g=$_[0];";
push @{$$self{ordering}}, $g;
$g;#;
$mt=bless({$o,$kt,$q,$lt,$s,$t},$u);
$nt=q#boot_side_effect#;
$ot=[];
$pt=q#unshift @{${$_[0]}{side_effects}}, $_[1]; $_[0]#;
$qt=bless({$o,$ot,$q,$pt,$s,$t},$u);
$rt=q#circular_links#;
$st=[];
$tt=q#local $_;
my $self = shift;
map "\\$$$self{visited}{$$_[0]}$$_[1]=$$self{visited}{$$_[2]};",
    @{$$self{circular}};#;
$ut=bless({$o,$st,$q,$tt,$s,$t},$u);
$vt=q#finalizer#;
$wt=[];
$xt=q#push    @{${$_[0]}{finalizers}},   $_[1]; $_[0]#;
$yt=bless({$o,$wt,$q,$xt,$s,$t},$u);
$zt=q#quote#;
$At=[];
$Bt=q#my $self = shift;
return $self->quote_scalar($_[0])
  if !ref $_[0] && Scalar::Util::looks_like_number($_[0]);
my $a = $self->address($_[0]);
$$self{objects}{$a} = \\$_[0];
my $v = $$self{visited}{$a};
return ref $v ? '0' : $v if defined $v;
$$self{visited}{$a} = \\'undef';
$self->allocate_gensym($_[0], $self->quote_value($_[0]));#;
$Ct=bless({$o,$At,$q,$Bt,$s,$t},$u);
$Dt=q#reconstruction#;
$Et=[];
$Ft=q#my $self = shift;
(@{$$self{definitions}}{@{$$self{ordering}}},
 $self->circular_links,
 @{$$self{side_effects}},
 @{$$self{finalizers}});#;
$Gt=bless({$o,$Et,$q,$Ft,$s,$t},$u);
$Ht=q#side_effect#;
$It=[];
$Jt=q#push    @{${$_[0]}{side_effects}}, $_[1]; $_[0]#;
$Kt=bless({$o,$It,$q,$Jt,$s,$t},$u);
$Lt=[];
$Mt=q#local $_;
my ($self, $fh) = @_;
$fh->print($_) for
  "\#!/usr/bin/env perl\\n",
  "chomp(\\$ni::license=<<'_');\\n", $ni::license, "\\n_\\n",
  "BEGIN{eval(\\$ni::boot=<<'_')}\\n", $ni::boot, "\\n_\\n",
  map("$_\\n", $self->reconstruction),
  "ni->run(\\@ARGV);", "\\n__DATA__\\n";#;
$Nt=bless({$o,$Lt,$q,$Mt,$s,$t},$u);
$Ot={$ft,$it,$jt,$mt,$nt,$qt,$rt,$ut,$vt,$yt,$zt,$Ct,$Dt,$Gt,$Ht,$Kt,$E9,$Nt};
$Pt=q#/lib/image_quoting.b#;
$Qt=bless({$L2,$et,$E3,$F3,$G3,$F3,$H3,$Ot,$D,$Pt},$Q3);
$Rt={};
$St=q#quote_code#;
$Tt=[];
$Ut=q#shift->die('cannot quote perl CODE refs', shift)#;
$Vt=bless({$o,$Tt,$q,$Ut,$s,$t},$u);
$Wt={$St,$Vt};
$Xt=q#/lib/quote_code_fail.b#;
$Yt=bless({$L2,$Rt,$E3,$F3,$G3,$F3,$H3,$Wt,$D,$Xt},$Q3);
$Zt={};
$cu=q#quote_array#;
$du=[];
$eu=q#local $_;
my ($self, $v) = @_;
my $a = $self->address($v);
$self->is_circular($$v[$_]) && $self->circular_arrayref($v, $_, $$v[$_])
  for 0..$\#{$v};
'[' . join(',', map $self->quote($_), @$v) . ']';#;
$fu=bless({$o,$du,$q,$eu,$s,$t},$u);
$gu=q#quote_hash#;
$hu=[];
$iu=q#local $_;
my ($self, $v) = @_;
my $a = $self->address($v);
my @ks = sort keys %$v;
my @qs;
for my $k (@ks) {
  $self->circular_hashref($v, $k, $$v{$k})
    if $self->is_circular($$v{$k});
  push @qs, $self->quote($k) . "," . $self->quote($$v{$k});
}
'{' . join(",", @qs) . '}';#;
$ju=bless({$o,$hu,$q,$iu,$s,$t},$u);
$ku=q#quote_scalar#;
$lu=[];
$mu=q#my $v = $_[1];
return 'undef' unless defined $v;
return $v if Scalar::Util::looks_like_number $v;
$v =~ s/([\\\\\#])/\\\\$1/g;
"q\#$v\#";#;
$nu=bless({$o,$lu,$q,$mu,$s,$t},$u);
$ou=q#quote_scalar_ref#;
$pu=[];
$qu=q#'\\\\' . shift->quote(${$_[0]})#;
$ru=bless({$o,$pu,$q,$qu,$s,$t},$u);
$su=q#quote_value#;
$tu=[];
$uu=q#my $self = shift;
return $self->quote_scalar($_[0])     unless ref $_[0];
return $self->quote_scalar_ref($_[0]) if 'SCALAR' eq ref $_[0];
return $self->quote_array($_[0])      if 'ARRAY'  eq ref $_[0];
return $self->quote_hash($_[0])       if 'HASH'   eq ref $_[0];
return $self->quote_code($_[0])       if 'CODE'   eq ref $_[0];
$self->quote_object($_[0]);#;
$vu=bless({$o,$tu,$q,$uu,$s,$t},$u);
$wu={$cu,$fu,$gu,$ju,$ku,$nu,$ou,$ru,$su,$vu};
$xu=q#/lib/quote_values.b#;
$yu=bless({$L2,$Zt,$E3,$F3,$G3,$F3,$H3,$wu,$D,$xu},$Q3);
$zu={};
$Au=q#quote_blessed#;
$Bu=[];
$Cu=q#my ($self, $x, $r) = @_;
$r ||= ref $x;
$self->quote_class($r);
my $t = Scalar::Util::reftype $x;
my $quoted = $t eq 'HASH' ? $self->quote_hash($x) : $self->quote_array($x);
"bless($quoted," . $self->quote($r) . ")";#;
$Du=bless({$o,$Bu,$q,$Cu,$s,$t},$u);
$Eu=q#quote_class#;
$Fu=[];
$Gu=q#my ($self, $class) = @_;
$self->quote(ni"ni:$class") if $$self{include_classes} && ni->exists("ni:$class");#;
$Hu=bless({$o,$Fu,$q,$Gu,$s,$t},$u);
$Iu=q#quote_object#;
$Ju=[];
$Ku=q#my $self = shift;
my $q = $self->allocate_gensym($_[0],
  $_[0]->can('serialize') ? $_[0]->serialize($self) : $self->quote_blessed(@_));
$self->finalizer("&\\$_($q)for\\@" . $self->quote(ref($_[0]) . "::ctors") . ";");
$q;#;
$Lu=bless({$o,$Ju,$q,$Ku,$s,$t},$u);
$Mu={$Au,$Du,$Eu,$Hu,$Iu,$Lu};
$Nu=q#/lib/quote_objects.b#;
$Ou=bless({$L2,$zu,$E3,$F3,$G3,$F3,$H3,$Mu,$D,$Nu},$Q3);
$Pu={};
$Qu=q#circular_arrayref#;
$Ru=[];
$Su=q#my $self          = shift;
my $address       = $self->address(shift);
my $index         = shift;
my $value_address = $self->address(shift);
push @{$$self{circular}}, [$address, "[$index]", $value_address];
$self;#;
$Tu=bless({$o,$Ru,$q,$Su,$s,$t},$u);
$Uu=q#circular_hashref#;
$Vu=[];
$Wu=q#my $self          = shift;
my $address       = $self->address(shift);
my $quoted_key    = $self->quote(shift);
my $value_address = $self->address(shift);
push @{$$self{circular}}, [$address, "{$quoted_key}", $value_address];
$self;#;
$Xu=bless({$o,$Vu,$q,$Wu,$s,$t},$u);
$Yu=q#is_circular#;
$Zu=[];
$cv=q#my $self = shift;
ref $$self{visited}{$self->address(shift)};#;
$dv=bless({$o,$Zu,$q,$cv,$s,$t},$u);
$ev={$Qu,$Tu,$Uu,$Xu,$Yu,$dv};
$fv=q#/lib/quote_circular_addressed.b#;
$gv=bless({$L2,$Pu,$E3,$F3,$G3,$F3,$H3,$ev,$D,$fv},$Q3);
$hv=[$u5,$dt,$Qt,$Yt,$yu,$Ou,$gv,$Hs];
$iv=bless({$L2,$Ts,$D,$Us,$x3,$hv},$k3);
$jv=q#lib/image.c::ctors#;
$kv=q#ni:/lib/image.c#;
$lv={$k3,1};
$mv=q#/lib/image.c#;
$nv=[$h7];
$ov=bless({$L2,$lv,$D,$mv,$x3,$nv},$y3);
$pv=q#ni:/lib/image_init.b#;
$qv=q#ni:/lib/image_quoting.b#;
$rv=q#ni:/lib/instance.b#;
$sv=q#ni:/lib/instantiable.b#;
$tv=q#ni:/lib/json.b#;
$uv={};
$vv=q#json_decode#;
$wv=[];
$xv=q#local $_;
my @v = [];
for ($_[0] =~ /[][{}]|true|false|null|"(?:[^"\\\\]+|\\\\.)*"|[-+eE\\d.]+/g) {
  if (/^[[{]$/) {
    push @v, [];
  } elsif (/^\\]$/) {
    die "json_decode $_[0]: too many closing brackets" if @v < 2;
    push @{$v[-2]}, $v[-1];
    pop @v;
  } elsif (/^\\}$/) {
    die "json_decode $_[0]: too many closing brackets" if @v < 2;
    push @{$v[-2]}, {@{$v[-1]}};
    pop @v;
  } else {
    push @{$v[-1]}, /^"/      ? json_unescape $_
                  : /^true$/  ? 1
                  : /^false$/ ? 0
                  : /^null$/  ? undef
                  :             0 + $_;
  }
}
my $r = pop @v;
die "json_decode $_[0]: not enough closing brackets" if @v;
wantarray ? @$r : $$r[0];#;
$yv=bless({$o,$wv,$q,$xv,$s,$Ns},$u);
$zv=q#json_encode#;
$Av=[];
$Bv=q#local $_;
my ($v) = @_;
return "[" . join(',', map ni::json_encode($_), @$v) . "]" if 'ARRAY' eq ref $v;
return "{" . join(',', map ni::json_escape($_) . ":" . ni::json_encode($$v{$_}),
                           sort keys %$v) . "}" if 'HASH' eq ref $v;
Scalar::Util::looks_like_number $v
  ? $v
  : defined $v ? ni::json_escape($v) : 'null';#;
$Cv=bless({$o,$Av,$q,$Bv,$s,$Ns},$u);
$Dv=q#json_escape#;
$Ev=[];
$Fv=q#(my $x = shift) =~ s/([\\b\\f\\n\\r\\t"\\\\])/"\\\\" . ($ni::json_escapes{$1} || "")/eg;
"\\"$x\\"";#;
$Gv=bless({$o,$Ev,$q,$Fv,$s,$Ns},$u);
$Hv=q#json_unescape#;
$Iv=[];
$Jv=q#my $x = substr shift, 1, -1;
$x =~ s/\\\\(["\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/ni::json_unescape_one($1)/eg;
$x;#;
$Kv=bless({$o,$Iv,$q,$Jv,$s,$Ns},$u);
$Lv=q#json_unescape_one#;
$Mv=[];
$Nv=q#$ni::json_unescapes{$_[0]} || chr hex substr $_[0], 1#;
$Ov=bless({$o,$Mv,$q,$Nv,$s,$Ns},$u);
$Pv={$vv,$yv,$zv,$Cv,$Dv,$Gv,$Hv,$Kv,$Lv,$Ov};
$Qv=q#/lib/json.b#;
$Rv=bless({$L2,$uv,$E3,$F3,$G3,$F3,$H3,$Pv,$D,$Qv},$Q3);
$Sv=q#ni#;
$Tv=q#ni:/lib/name_as_string.b#;
$Uv=q#ni:/lib/named.b#;
$Vv=q#ni:/lib/named_in_ni.b#;
$Wv=q#ni:/lib/namespaced.b#;
$Xv=q#ni:/lib/ni#;
$Yv={$g5,1};
$Zv=q#/lib/ni#;
$cw={};
$dw=q#extend#;
$ew=q#my $self = shift;
for (@_) {
  my $r = do $_;
  die "ni: failed to parse $_: $@" if $@;
  die "ni: failed to execute $_: $!" unless defined $r;
}
$self;#;
$fw=bless({$q,$ew,$s,$t},$u);
$gw=q#is_mutable#;
$hw=q#$0 ne "-" && -w $0#;
$iw=bless({$q,$hw,$s,$t},$u);
$jw=q#modify#;
$kw=q#my ($self, $fn) = @_;
\# TODO: replace all of this with a generalized "atomic-update" function
\# against UNIX files.
die "ni: cannot modify immutable instance" unless $self->is_mutable;
my (undef, undef, $mode) = stat $0;
my $temp = map chr 97 + rand(26), 1..16;
my @r = split /\\//, $0;
$r[-1] =~ s/^/./;
$r[-1] =~ s/$/.$temp/;
my $r = join '/', @r;
open my $w, '>', $r or die "ni: failed to create staging file: $!";
chmod $mode, $r or die "ni: failed to chmod $r to $mode: $!";
&$fn($w);
close $w;
rename $r, $0 or die "ni: failed to rename: $!";#;
$lw=bless({$q,$kw,$s,$t},$u);
$mw={$dw,$fw,$gw,$iw,$jw,$lw};
$nw=q#/lib/ni_self.b#;
$ow=bless({$L2,$cw,$E3,$F3,$G3,$F3,$H3,$mw,$D,$nw},$Q3);
$pw={};
$qw=q#--internal/+=#;
$rw=q#my $self = shift;
$self->extend($_) for @_;
my $q = $self->quoted(use_newlines => 1);
$self->modify(sub {$q->write(shift)});
0;#;
$sw=bless({$q,$rw,$s,$t},$u);
$tw=q#--internal/eval#;
$uw=q#my $self = shift;
for (@_) {
  my $r = ni::eval($_);
  print $@ ? "ERROR $@\\n" : "$r\\n";
}
0;#;
$vw=bless({$q,$uw,$s,$t},$u);
$ww=q#--internal/image#;
$xw=q#shift->quoted(use_newlines => 1)->write(\\*STDOUT);
0;#;
$yw=bless({$q,$xw,$s,$t},$u);
$zw=q#--internal/test#;
$Aw=q#my $self = shift;
my @tests = map ni($_)->tests, grep /^ni\\.doc:/, keys %{$$self{named}};
my $fails = 0;
print scalar(@tests) . " test(s)\\n";
my %names = %{ni->{named}};
for my $t (@tests) {
  %{ni->{named}} = %names;
  my $r = eval {&$t};
  if ($@) {
    ++$fails;
    print "FAIL\\n$@ in\\n$t\\n\\n";
  } elsif (!$r) {
    ++$fails;
    print "FAIL\\n$r\\n";
  }
}
printf "% 4d test(s) passed\\n", @tests - $fails;
printf "% 4d test(s) failed\\n", $fails;
!!$fails;#;
$Bw=bless({$q,$Aw,$s,$t},$u);
$Cw=q#my $self = shift;
shift, exit $self->$1(@_) if $_[0] =~ /^(--.*)$/ && $self->can($1);
exit $self->default(@_);#;
$Dw=bless({$q,$Cw,$s,$t},$u);
$Ew={$qw,$sw,$tw,$vw,$ww,$yw,$zw,$Bw,$do,$Dw};
$Fw=q#/lib/ni_main.b#;
$Gw=bless({$L2,$pw,$E3,$F3,$G3,$F3,$H3,$Ew,$D,$Fw},$Q3);
$Hw={};
$Iw=q#my $self = shift;
return $$self{named}{$_[0]} if exists $$self{named}{$_[0]};
return $$self{resolvers}{$1}->($_[0]) if
  $_[0] =~ /^([^:]+):/ and exists $$self{resolvers}{$1};
die "ni:self failed to resolve $_[0]";#;
$Jw=bless({$q,$Iw,$s,$t},$u);
$Kw=q#resolver_for#;
$Lw=q#my $self = shift;
${$$self{resolvers}}{$_[0]} = $_[1];
$self;#;
$Mw=bless({$q,$Lw,$s,$t},$u);
$Nw={$u4,$Jw,$Kw,$Mw};
$Ow=q#/lib/ni_resolver.b#;
$Pw=bless({$L2,$Hw,$E3,$F3,$G3,$F3,$H3,$Nw,$D,$Ow},$Q3);
$Qw={};
$Rw=q#exists#;
$Sw=q#exists $_[0]->{named}{$_[1]}#;
$Tw=bless({$q,$Sw,$s,$t},$u);
$Uw=q#quoted#;
$Vw=q#my $self = shift;
my $q = ni('ni:/lib/image')->new(@_);
my $gs = $q->quote($self);
$q->side_effect("\\$ni::self=$gs;");
$q;#;
$Ww=bless({$q,$Vw,$s,$t},$u);
$Xw={$Rw,$Tw,$Uw,$Ww};
$Yw=q#/lib/ni_image.b#;
$Zw=bless({$L2,$Qw,$E3,$F3,$G3,$F3,$H3,$Xw,$D,$Yw},$Q3);
$cx=[$u5,$ow,$Gw,$Pw,$Zw];
$dx=bless({$L2,$Yv,$D,$Zv,$x3,$cx},$l3);
$ex=q#lib/ni.c::ctors#;
$fx=q#ni:/lib/ni.c#;
$gx={$l3,1};
$hx=q#/lib/ni.c#;
$ix=[$h7];
$jx=bless({$L2,$gx,$D,$hx,$x3,$ix},$y3);
$kx=q#ni:/lib/ni_image.b#;
$lx=q#ni:/lib/ni_main.b#;
$mx=q#ni:/lib/ni_resolver.b#;
$nx=q#ni:/lib/ni_self.b#;
$ox=q#ni:/lib/ni_static_util.b#;
$px={};
$qx=q#abbrev#;
$rx=[];
$sx=q#length($_[0]) < $_[1] ? $_[0] : substr($_[0], 0, $_[1] - 3) . '...'#;
$tx=bless({$o,$rx,$q,$sx,$s,$t},$u);
$ux=q#dor#;
$vx=[];
$wx=q#defined $_[0] ? $_[0] : $_[1]#;
$xx=bless({$o,$vx,$q,$wx,$s,$t},$u);
$yx=q#indent#;
$zx=[];
$Ax=q#my ($s, $indent) = (@_, 2);
join "\\n", map ' ' x $indent . $_, split /\\n/, $s;#;
$Bx=bless({$o,$zx,$q,$Ax,$s,$t},$u);
$Cx=q#max#;
$Dx=[];
$Ex=q#local $_; my $m = pop @_; $m = $m >  $_ ? $m : $_ for @_; $m#;
$Fx=bless({$o,$Dx,$q,$Ex,$s,$t},$u);
$Gx=q#maxstr#;
$Hx=[];
$Ix=q#local $_; my $m = pop @_; $m = $m gt $_ ? $m : $_ for @_; $m#;
$Jx=bless({$o,$Hx,$q,$Ix,$s,$t},$u);
$Kx=q#mean#;
$Lx=[];
$Mx=q#sum(@_) / (@_ || 1)#;
$Nx=bless({$o,$Lx,$q,$Mx,$s,$t},$u);
$Ox=q#min#;
$Px=[];
$Qx=q#local $_; my $m = pop @_; $m = $m <  $_ ? $m : $_ for @_; $m#;
$Rx=bless({$o,$Px,$q,$Qx,$s,$t},$u);
$Sx=q#minstr#;
$Tx=[];
$Ux=q#local $_; my $m = pop @_; $m = $m lt $_ ? $m : $_ for @_; $m#;
$Vx=bless({$o,$Tx,$q,$Ux,$s,$t},$u);
$Wx=q#sgr#;
$Xx=[];
$Yx=q#(my $x = $_[0]) =~ s/$_[1]/$_[2]/g; $x#;
$Zx=bless({$o,$Xx,$q,$Yx,$s,$t},$u);
$cy=q#sr#;
$dy=[];
$ey=q#(my $x = $_[0]) =~ s/$_[1]/$_[2]/;  $x#;
$fy=bless({$o,$dy,$q,$ey,$s,$t},$u);
$gy=q#sum#;
$hy=[];
$iy=q#local $_; my $x = 0; $x += $_ for @_; $x#;
$jy=bless({$o,$hy,$q,$iy,$s,$t},$u);
$ky=q#swap#;
$ly=[];
$my=q#@_[0, 1] = @_[1, 0]#;
$ny=bless({$o,$ly,$q,$my,$s,$t},$u);
$oy={$qx,$tx,$ux,$xx,$yx,$Bx,$Cx,$Fx,$Gx,$Jx,$Kx,$Nx,$Ox,$Rx,$Sx,$Vx,$Wx,$Zx,$cy,$fy,$gy,$jy,$ky,$ny};
$py=q#/lib/ni_static_util.b#;
$qy=bless({$L2,$px,$E3,$F3,$G3,$F3,$H3,$oy,$D,$py},$Q3);
$ry=q#ni:/lib/perlbranch.b#;
$sy=q#ni:/lib/quote_circular_addressed.b#;
$ty=q#ni:/lib/quote_code_fail.b#;
$uy=q#ni:/lib/quote_objects.b#;
$vy=q#ni:/lib/quote_simple#;
$wy={$h5,1};
$xy=q#/lib/quote_simple#;
$yy={};
$zy=[];
$Ay=q#+{}#;
$By=bless({$o,$zy,$q,$Ay,$s,$t},$u);
$Cy={$G4,$By};
$Dy=q#/lib/quote_simple_init.b#;
$Ey=bless({$L2,$yy,$E3,$F3,$G3,$F3,$H3,$Cy,$D,$Dy},$Q3);
$Fy={};
$Gy=[];
$Hy=bless({$o,$Gy,$q,0,$s,$t},$u);
$Iy=[];
$Jy=q#shift->quote_value(shift)#;
$Ky=bless({$o,$Iy,$q,$Jy,$s,$t},$u);
$Ly={$Yu,$Hy,$zt,$Ky};
$My=q#/lib/quote_simple_quote.b#;
$Ny=bless({$L2,$Fy,$E3,$F3,$G3,$F3,$H3,$Ly,$D,$My},$Q3);
$Oy=[$u5,$Ey,$Ny,$Yt,$yu,$Ou];
$Py=bless({$L2,$wy,$D,$xy,$x3,$Oy},$m3);
$Qy=q#lib/quote_simple.c::ctors#;
$Ry=q#ni:/lib/quote_simple.c#;
$Sy={$m3,1};
$Ty=q#/lib/quote_simple.c#;
$Uy=[$h7];
$Vy=bless({$L2,$Sy,$D,$Ty,$x3,$Uy},$y3);
$Wy=q#ni:/lib/quote_simple_init.b#;
$Xy=q#ni:/lib/quote_simple_quote.b#;
$Yy=q#ni:/lib/quote_values.b#;
$Zy=q#ni:/lib/ref_eq.b#;
$cz=q#ni:/lib/resolver.b#;
$dz=q#ni:/lib/slice#;
$ez={$Q3,1};
$fz=q#/lib/slice#;
$gz=q#local $_;
my ($self, $p) = @_;
$p = $p->package if ref $p;
die "/lib/slice.b->apply('$p'): perl packages don't start with "
  . "slashes (this fails on older versions of perl)" if $p =~ /^\\//;
return if $$self{applied_to}{$p};
for (keys %{$$self{methods}}) {
  die "$self: overlapping method $p\\::$_" if defined *{"$p\\::$_"}{CODE};
}
$self->apply_unsafe($p);#;
$hz=bless({$q,$gz,$s,$t},$u);
$iz=q#local $_;
my ($self, $p) = @_;
return if $$self{applied_to}{$p};
$$self{applied_to}{$p} = 1;
push @{"$p\\::ctors"}, $$self{ctor} if $$self{ctor};
push @{"$p\\::dtors"}, $$self{dtor} if $$self{dtor};
if (grep /^\\(/, keys %{$$self{methods}}) {
  *{"$p\\::()"} = sub {};
  *{"$p\\::OVERLOAD"} = {};
}
*{"$p\\::$_"} = \\&{$$self{methods}{$_}} for keys %{$$self{methods}};
$self;#;
$jz=bless({$q,$iz,$s,$t},$u);
$kz=q#lib/slice::apply#;
$lz=q#lib/slice::apply_unsafe#;
$mz={};
$nz=q#apply_unsafe#;
$oz={$L3,$hz,$nz,$jz};
$pz=q#/lib/slice.b#;
$qz=bless({$L2,$mz,$H3,$oz,$D,$pz},$Q3);
$rz={};
$sz=q#my $class = shift;
my $name  = shift;
my %args  = @_;
+{ctor       => delete($args{ctor}),
  dtor       => delete($args{dtor}),
  applied_to => delete($args{applied_to}),
  name       => $name,
  methods    => \\%args};#;
$tz=bless({$q,$sz,$s,$t},$u);
$uz={$G4,$tz};
$vz=q#/lib/slice_init.b#;
$wz=bless({$L2,$rz,$H3,$uz,$D,$vz},$Q3);
$xz={};
$yz=[];
$zz=q#local $_;
my ($self, $quote) = @_;
my $name = $self->name;
$quote->quote_class(ref $self);

if (defined $name and $name eq 'ni:/lib/slice.b') {
  my %methods;
  my @ks = sort keys %{$$self{methods}};
  @methods{@ks} = map $quote->quote($_), @{$$self{methods}}{@ks};
  for my $p (sort keys %{$$self{applied_to}}) {
    $quote->boot_side_effect(
      '*' . $quote->quote("$p\\::$_") . "=\\\\\\&$methods{$_};")
      for @ks;
  }
}

my $g = $quote->allocate_gensym($self,
  $quote->quote_blessed({%$self, applied_to => {}}, ref $self));
$quote->side_effect("$g\\->apply_unsafe(" . $quote->quote($_) . ");")
  for sort keys %{$$self{applied_to}};
$g;#;
$Az=bless({$o,$yz,$q,$zz,$s,$t},$u);
$Bz={$gs,$Az};
$Cz=q#/lib/slice_serialize.b#;
$Dz=bless({$L2,$xz,$E3,$F3,$G3,$F3,$H3,$Bz,$D,$Cz},$Q3);
$Ez=[$F5,$d4,$qz,$wz,$Dz];
$Fz=bless({$L2,$ez,$D,$fz,$x3,$Ez},$n3);
$Gz=q#lib/slice.c::ctors#;
$Hz=q#ni:/lib/slice.b#;
$Iz=q#ni:/lib/slice.c#;
$Jz={$n3,1};
$Kz=q#/lib/slice.c#;
$Lz=[$m7];
$Mz=bless({$L2,$Jz,$D,$Kz,$x3,$Lz},$y3);
$Nz=q#ni:/lib/slice_init.b#;
$Oz=q#ni:/lib/slice_serialize.b#;
$Pz=q#ni:/lib/static_fn.b#;
$Qz={};
$Rz=[];
$Sz=q#ni('ni:/lib/fn')->new(@_)#;
$Tz=bless({$o,$Rz,$q,$Sz,$s,$Ns},$u);
$Uz=q#fp#;
$Vz=[];
$Wz=q#($$)#;
$Xz=bless({$o,$Vz,$q,$Sz,$s,$Wz},$u);
$Yz={$Mr,$Tz,$Uz,$Xz};
$Zz=q#/lib/static_fn.b#;
$cA=bless({$L2,$Qz,$E3,$F3,$G3,$F3,$H3,$Yz,$D,$Zz},$Q3);
$dA=q#ni:/lib/subclass.b#;
$eA=q#ni:/lib/tag#;
$fA={$e4,1};
$gA=q#/lib/tag#;
$hA={};
$iA=q#local $_;
my ($self, $p) = @_;
$_->apply($p) for @{$$self{slices}};
$self;#;
$jA=bless({$q,$iA,$s,$t},$u);
$kA={$L3,$jA};
$lA=q#/lib/tag.b#;
$mA=bless({$L2,$hA,$E3,$F3,$G3,$F3,$H3,$kA,$D,$lA},$Q3);
$nA={};
$oA=q#local $_;
my $class = shift;
my $name  = shift;
+{name   => $name,
  slices => [map $class->resolve($_), @_]};#;
$pA=bless({$q,$oA,$s,$t},$u);
$qA={$G4,$pA};
$rA=q#/lib/tag_init.b#;
$sA=bless({$L2,$nA,$E3,$F3,$G3,$F3,$H3,$qA,$D,$rA},$Q3);
$tA=[$F5,$d4,$mA,$sA];
$uA=bless({$L2,$fA,$D,$gA,$x3,$tA},$o3);
$vA=q#lib/tag.c::ctors#;
$wA=q#ni:/lib/tag.b#;
$xA=q#ni:/lib/tag.c#;
$yA={$o3,1};
$zA=q#/lib/tag.c#;
$AA=[$m7];
$BA=bless({$L2,$yA,$D,$zA,$x3,$AA},$y3);
$CA=q#ni:/lib/tag_init.b#;
$DA=q#ni:/lib/test_value#;
$EA={$i5,1};
$FA=q#/lib/test_value#;
$GA={};
$HA=[];
$IA=q#\\$_[1]#;
$JA=bless({$o,$HA,$q,$IA,$s,$t},$u);
$KA={$G4,$JA};
$LA=q#/lib/test_value_init.b#;
$MA=bless({$L2,$GA,$E3,$F3,$G3,$F3,$H3,$KA,$D,$LA},$Q3);
$NA={};
$OA=q#(==#;
$PA=[];
$QA=q#my ($self, $rhs) = @_;
my $diff = $self->diff($rhs);
die $self->class->new($diff) if defined $diff;
1;#;
$RA=bless({$o,$PA,$q,$QA,$s,$t},$u);
$SA=q#diff#;
$TA=[];
$UA=q#my ($self, $rhs) = @_;
my $class = $self->class;
my $lhs = $$self;
my $rl = ref $lhs;
my $rr = ref $rhs;
my $realtype = Scalar::Util::reftype($lhs) || "";
return {type_difference => [$rl, $rr]} unless $rl eq $rr;
if ($realtype eq 'HASH') {
  my @left_only  = grep !exists $$rhs{$_}, keys %$lhs;
  my @right_only = grep !exists $$lhs{$_}, keys %$rhs;
  return {hash_key_mismatch => 1,
          object_type       => $rl,
          left_only         => \\@left_only,
          right_only        => \\@right_only}
    if @left_only || @right_only;
  my %diff;
  $diff{$_} = $class->new($$lhs{$_})->diff($$rhs{$_})
    for keys %$lhs;
  delete @diff{grep !defined($diff{$_}), keys %diff};
  return {hash_value_mismatch => 1,
          object_type         => $rl,
          diffs               => \\%diff} if keys %diff;
} elsif ($realtype eq 'ARRAY') {
  return {array_length_mismatch => [scalar(@$lhs), scalar(@$rhs)]}
    unless @$lhs == @$rhs;
  my %diff;
  $diff{$_} = $class->new($$lhs[$_])->diff($$rhs[$_])
    for 0..$\#{$lhs};
  delete @diff{grep !defined($diff{$_}), keys %diff};
  return {array_value_mismatch => 1,
          object_type          => $rl,
          diffs                => \\%diff} if keys %diff;
} elsif ($realtype eq 'SCALAR') {
  return $class->new($$lhs)->diff($$rhs);
} elsif (!$rl) {
  return {scalar_difference => [$lhs, $rhs]} unless $lhs eq $rhs;
}
return undef;#;
$VA=bless({$o,$TA,$q,$UA,$s,$t},$u);
$WA={$OA,$RA,$SA,$VA};
$XA=q#/lib/test_value_eq.b#;
$YA=bless({$L2,$NA,$E3,$F3,$G3,$F3,$H3,$WA,$D,$XA},$Q3);
$ZA={};
$cB=[];
$dB=q#ni::json_encode ${$_[0]}#;
$eB=bless({$o,$cB,$q,$dB,$s,$t},$u);
$fB={$d6,$eB};
$gB=q#/lib/test_value_str.b#;
$hB=bless({$L2,$ZA,$E3,$F3,$G3,$F3,$H3,$fB,$D,$gB},$Q3);
$iB=[$u5,$MA,$YA,$hB];
$jB=bless({$L2,$EA,$D,$FA,$x3,$iB},$p3);
$kB=q#lib/test_value.c::ctors#;
$lB=q#ni:/lib/test_value.c#;
$mB={$p3,1};
$nB=q#/lib/test_value.c#;
$oB=[$h7];
$pB=bless({$L2,$mB,$D,$nB,$x3,$oB},$y3);
$qB=q#ni:/lib/test_value_eq.b#;
$rB=q#ni:/lib/test_value_init.b#;
$sB=q#ni:/lib/test_value_str.b#;
$tB=q#ni:/metaclass#;
$uB={$y3,1};
$vB=q#/metaclass#;
$wB=[$B4,$M6,$L4,$B6];
$xB=bless({$L2,$uB,$D,$vB,$x3,$wB},$q3);
$yB=q#metaclass.c::ctors#;
$zB=q#ni:/metaclass.c#;
$AB={$q3,1};
$BB=q#/metaclass.c#;
$CB=[$V6];
$DB=bless({$L2,$AB,$D,$BB,$x3,$CB},$y3);
$EB=q#ni:/module#;
$FB=q#ni:/module.c#;
$GB=q#ni:/object#;
$HB=q#ni:/object.c#;
$IB=q#ni:/semantic/dimension#;
$JB={$t3,1};
$KB=q#/semantic/dimension#;
$LB=[$V6];
$MB=bless({$L2,$JB,$D,$KB,$x3,$LB},$u3);
$NB=q#semantic/dimension.c::ctors#;
$OB=q#ni:/semantic/dimension.c#;
$PB={$u3,1};
$QB=q#/semantic/dimension.c#;
$RB=[$q7];
$SB=bless({$L2,$PB,$D,$QB,$x3,$RB},$y3);
$TB=q#ni:/semantic/task#;
$UB=q#ni:/semantic/task.c#;
$VB=q#ni:/semantic/task_outcome.b#;
$WB=q#ni:/semantic/task_ro.b#;
$XB=q#ni:main#;
$YB={$si,1};
$ZB=[$cA,$Rs,$ri];
$cC=bless({$L2,$YB,$D,$si,$x3,$ZB},$z3);
$dC=q#module::ctors#;
$eC=q#ni:ni#;
$fC={$Sv,1};
$gC={$Sv,1};
$hC=q#json_escapes#;
$iC=q##;
$jC=q#b#;
$kC=q#	#;
$lC=q#t#;
$mC=q#
#;
$nC=q#n#;
$oC=q##;
$pC=q#"#;
$qC=q#/#;
$rC=q#\\#;
$sC={$iC,$jC,$kC,$lC,$mC,$nC,$oC,$Re,$pC,$pC,$qC,$qC,$rC,$rC};
$tC=q#json_unescapes#;
$uC={$pC,$pC,$qC,$qC,$rC,$rC,$jC,$iC,$nC,$mC,$Re,$oC,$lC,$kC};
$vC={$hC,$sC,$tC,$uC};
$wC=q#/lib/json_data.b#;
$xC=bless({$L2,$gC,$Ok,$vC,$D,$wC},$e5);
$yC=q#lib/dataslice::ctors#;
$zC=[$xC,$Rv,$qy];
$AC=bless({$L2,$fC,$D,$Sv,$x3,$zC},$z3);
$BC={$d,$G,$I,$N,$O,$T,$U,$h1,$i1,$t1,$u1,$F1,$G1,$P1,$Q1,$h2,$i2,$n2,$o2,$D2,$E2,$J2,$K2,$V6,$X6,$q7,$r7,$C7,$E7,$I7,$J7,$A7,$K7,$Q9,$S9,$ka,$la,$u9,$ma,$O9,$na,$Ea,$Ga,$Ka,$La,$va,$Ma,$Ca,$Na,$zc,$Bc,$Fc,$Gc,$hc,$Hc,$xc,$Ic,$fb,$Jc,$Xb,$Kc,$zb,$Lc,$Wa,$Mc,$Zd,$de,$he,$ie,$Cd,$je,$Nd,$ke,$ed,$le,$Xd,$me,$Vc,$ne,$md,$oe,$lf,$nf,$rf,$sf,$Fe,$tf,$Me,$uf,$jf,$vf,$xe,$wf,$Fg,$Hg,$Lg,$Mg,$Gh,$Ih,$Dg,$Jh,$Nh,$Oh,$nh,$Ph,$Eh,$Qh,$uh,$Rh,$gh,$Sh,$Qf,$Th,$ng,$Uh,$Jf,$Vh,$Yf,$Wh,$ri,$ti,$Ri,$Ti,$Xi,$Yi,$Ci,$Zi,$Pi,$cj,$m9,$dj,$ia,$ej,$ga,$fj,$q8,$gj,$y8,$hj,$K8,$ij,$U7,$jj,$k9,$kj,$W8,$lj,$yk,$Ak,$Ek,$Fk,$wk,$Gk,$Ij,$Hk,$gk,$Ik,$yj,$Jk,$Uj,$Kk,$Bl,$Dl,$Hl,$Il,$ll,$Jl,$zl,$Kl,$el,$Ll,$Xm,$Zm,$qn,$rn,$on,$sn,$ro,$to,$Mo,$No,$Ko,$Oo,$Pn,$Po,$Zn,$Qo,$In,$Ro,$no,$So,$Bm,$To,$Vm,$Uo,$op,$qp,$up,$vp,$fp,$wp,$mp,$xp,$Z5,$yp,$F5,$zp,$m7,$Ap,$Kp,$Mp,$R3,$Np,$Rp,$Sp,$Ip,$Tp,$L4,$Up,$mq,$oq,$sq,$tq,$kq,$uq,$eq,$vq,$y6,$wq,$P5,$xq,$w6,$yq,$fr,$hr,$lr,$mr,$Sq,$nr,$Fq,$or,$Lq,$pr,$dr,$qr,$D5,$rr,$os,$qs,$us,$vs,$Er,$ws,$es,$xs,$Sr,$ys,$ms,$zs,$Hs,$Is,$Rs,$Ss,$iv,$kv,$ov,$pv,$dt,$qv,$Qt,$rv,$s5,$sv,$M6,$tv,$Rv,$Tv,$i6,$Uv,$d4,$Vv,$l4,$Wv,$s4,$Xv,$dx,$fx,$jx,$kx,$Zw,$lx,$Gw,$mx,$Pw,$nx,$ow,$ox,$qy,$ry,$B4,$sy,$gv,$ty,$Yt,$uy,$Ou,$vy,$Py,$Ry,$Vy,$Wy,$Ey,$Xy,$Ny,$Yy,$yu,$Zy,$p6,$cz,$z4,$dz,$Fz,$Hz,$qz,$Iz,$Mz,$Nz,$wz,$Oz,$Dz,$Pz,$cA,$dA,$T6,$eA,$uA,$wA,$mA,$xA,$BA,$CA,$sA,$DA,$jB,$lB,$pB,$qB,$YA,$rB,$MA,$sB,$hB,$tB,$xB,$zB,$DB,$EB,$B6,$FB,$o7,$GB,$u5,$HB,$h7,$IB,$MB,$OB,$SB,$TB,$nm,$UB,$hn,$VB,$lm,$WB,$Xl,$XB,$cC,$eC,$AC};
$CC=q#resolvers#;
$DC=[];
$EC=q#ni('ni:/io/fd')->new(0 + substr shift, 3)#;
$FC=bless({$o,$DC,$q,$EC,$s,$t},$u);
$GC=q#file#;
$HC=[];
$IC=q#my $f = shift;
$f =~ s/^file:(?:\\/\\/)?//;
ni('ni:/io/file')->new($f);#;
$JC=bless({$o,$HC,$q,$IC,$s,$t},$u);
$KC=q#null#;
$LC=[];
$MC=q#ni('ni:/io/null')->new#;
$NC=bless({$o,$LC,$q,$MC,$s,$t},$u);
$OC=q#sh#;
$PC=[];
$QC=q#ni('ni:/io/exec')->new('/bin/sh', '-c', substr shift, 3)->fork#;
$RC=bless({$o,$PC,$q,$QC,$s,$t},$u);
$SC=q#str#;
$TC=[];
$UC=q#my $s = shift;
ni('ni:/io/str')->new(substr($s, 4) . "\\n");#;
$VC=bless({$o,$TC,$q,$UC,$s,$t},$u);
$WC={$Fb,$FC,$GC,$JC,$KC,$NC,$OC,$RC,$SC,$VC};
$XC=bless({$c,$BC,$CC,$WC},$g5);
$YC=q#lib/ni::ctors#;
*$lz=\&$jz;
*$kz=\&$hz;
$R3->apply_unsafe($M2);
$R3->apply_unsafe($N2);
$R3->apply_unsafe($O2);
$R3->apply_unsafe($P2);
$R3->apply_unsafe($Q2);
$R3->apply_unsafe($R2);
$R3->apply_unsafe($S2);
$R3->apply_unsafe($T2);
$R3->apply_unsafe($U2);
$R3->apply_unsafe($V2);
$R3->apply_unsafe($W2);
$R3->apply_unsafe($X2);
$R3->apply_unsafe($Y2);
$R3->apply_unsafe($Z2);
$R3->apply_unsafe($c3);
$R3->apply_unsafe($d3);
$R3->apply_unsafe($e3);
$R3->apply_unsafe($f3);
$R3->apply_unsafe($S3);
$R3->apply_unsafe($g3);
$R3->apply_unsafe($h3);
$R3->apply_unsafe($i3);
$R3->apply_unsafe($j3);
$R3->apply_unsafe($k3);
$R3->apply_unsafe($l3);
$R3->apply_unsafe($m3);
$R3->apply_unsafe($n3);
$R3->apply_unsafe($o3);
$R3->apply_unsafe($p3);
$R3->apply_unsafe($y3);
$R3->apply_unsafe($q3);
$R3->apply_unsafe($z3);
$R3->apply_unsafe($r3);
$R3->apply_unsafe($s3);
$R3->apply_unsafe($t3);
$R3->apply_unsafe($u3);
$R3->apply_unsafe($v3);
$d4->apply_unsafe($M2);
$d4->apply_unsafe($N2);
$d4->apply_unsafe($O2);
$d4->apply_unsafe($P2);
$d4->apply_unsafe($Q2);
$d4->apply_unsafe($R2);
$d4->apply_unsafe($S2);
$d4->apply_unsafe($T2);
$d4->apply_unsafe($U2);
$d4->apply_unsafe($V2);
$d4->apply_unsafe($W2);
$d4->apply_unsafe($X2);
$d4->apply_unsafe($Y2);
$d4->apply_unsafe($Z2);
$d4->apply_unsafe($c3);
$d4->apply_unsafe($d3);
$d4->apply_unsafe($e3);
$d4->apply_unsafe($f3);
$d4->apply_unsafe($S3);
$d4->apply_unsafe($g3);
$d4->apply_unsafe($h3);
$d4->apply_unsafe($F);
$d4->apply_unsafe($i3);
$d4->apply_unsafe($j3);
$d4->apply_unsafe($k3);
$d4->apply_unsafe($l3);
$d4->apply_unsafe($m3);
$d4->apply_unsafe($Q3);
$d4->apply_unsafe($n3);
$d4->apply_unsafe($e4);
$d4->apply_unsafe($o3);
$d4->apply_unsafe($p3);
$d4->apply_unsafe($y3);
$d4->apply_unsafe($q3);
$d4->apply_unsafe($z3);
$d4->apply_unsafe($r3);
$d4->apply_unsafe($s3);
$d4->apply_unsafe($t3);
$d4->apply_unsafe($u3);
$d4->apply_unsafe($v3);
$l4->apply_unsafe($M2);
$l4->apply_unsafe($N2);
$l4->apply_unsafe($O2);
$l4->apply_unsafe($P2);
$l4->apply_unsafe($Q2);
$l4->apply_unsafe($R2);
$l4->apply_unsafe($S2);
$l4->apply_unsafe($T2);
$l4->apply_unsafe($U2);
$l4->apply_unsafe($V2);
$l4->apply_unsafe($W2);
$l4->apply_unsafe($X2);
$l4->apply_unsafe($Y2);
$l4->apply_unsafe($Z2);
$l4->apply_unsafe($c3);
$l4->apply_unsafe($d3);
$l4->apply_unsafe($e3);
$l4->apply_unsafe($f3);
$l4->apply_unsafe($S3);
$l4->apply_unsafe($g3);
$l4->apply_unsafe($h3);
$l4->apply_unsafe($i3);
$l4->apply_unsafe($j3);
$l4->apply_unsafe($k3);
$l4->apply_unsafe($l3);
$l4->apply_unsafe($m3);
$l4->apply_unsafe($Q3);
$l4->apply_unsafe($n3);
$l4->apply_unsafe($e4);
$l4->apply_unsafe($o3);
$l4->apply_unsafe($p3);
$l4->apply_unsafe($y3);
$l4->apply_unsafe($q3);
$l4->apply_unsafe($z3);
$l4->apply_unsafe($r3);
$l4->apply_unsafe($s3);
$l4->apply_unsafe($t3);
$l4->apply_unsafe($u3);
$l4->apply_unsafe($v3);
$s4->apply_unsafe($M2);
$s4->apply_unsafe($N2);
$s4->apply_unsafe($O2);
$s4->apply_unsafe($P2);
$s4->apply_unsafe($Q2);
$s4->apply_unsafe($R2);
$s4->apply_unsafe($S2);
$s4->apply_unsafe($T2);
$s4->apply_unsafe($U2);
$s4->apply_unsafe($V2);
$s4->apply_unsafe($W2);
$s4->apply_unsafe($X2);
$s4->apply_unsafe($Y2);
$s4->apply_unsafe($Z2);
$s4->apply_unsafe($c3);
$s4->apply_unsafe($d3);
$s4->apply_unsafe($e3);
$s4->apply_unsafe($f3);
$s4->apply_unsafe($S3);
$s4->apply_unsafe($g3);
$s4->apply_unsafe($h3);
$s4->apply_unsafe($i3);
$s4->apply_unsafe($j3);
$s4->apply_unsafe($k3);
$s4->apply_unsafe($l3);
$s4->apply_unsafe($m3);
$s4->apply_unsafe($Q3);
$s4->apply_unsafe($n3);
$s4->apply_unsafe($e4);
$s4->apply_unsafe($o3);
$s4->apply_unsafe($p3);
$s4->apply_unsafe($y3);
$s4->apply_unsafe($q3);
$s4->apply_unsafe($z3);
$s4->apply_unsafe($r3);
$s4->apply_unsafe($s3);
$s4->apply_unsafe($t3);
$s4->apply_unsafe($u3);
$s4->apply_unsafe($v3);
$z4->apply_unsafe($M2);
$z4->apply_unsafe($N2);
$z4->apply_unsafe($O2);
$z4->apply_unsafe($P2);
$z4->apply_unsafe($Q2);
$z4->apply_unsafe($R2);
$z4->apply_unsafe($S2);
$z4->apply_unsafe($T2);
$z4->apply_unsafe($U2);
$z4->apply_unsafe($V2);
$z4->apply_unsafe($W2);
$z4->apply_unsafe($X2);
$z4->apply_unsafe($Y2);
$z4->apply_unsafe($Z2);
$z4->apply_unsafe($c3);
$z4->apply_unsafe($d3);
$z4->apply_unsafe($e3);
$z4->apply_unsafe($f3);
$z4->apply_unsafe($S3);
$z4->apply_unsafe($g3);
$z4->apply_unsafe($h3);
$z4->apply_unsafe($i3);
$z4->apply_unsafe($j3);
$z4->apply_unsafe($k3);
$z4->apply_unsafe($l3);
$z4->apply_unsafe($m3);
$z4->apply_unsafe($n3);
$z4->apply_unsafe($e4);
$z4->apply_unsafe($o3);
$z4->apply_unsafe($p3);
$z4->apply_unsafe($y3);
$z4->apply_unsafe($q3);
$z4->apply_unsafe($z3);
$z4->apply_unsafe($r3);
$z4->apply_unsafe($s3);
$z4->apply_unsafe($t3);
$z4->apply_unsafe($u3);
$z4->apply_unsafe($v3);
$L4->apply_unsafe($M2);
$L4->apply_unsafe($N2);
$L4->apply_unsafe($O2);
$L4->apply_unsafe($P2);
$L4->apply_unsafe($Q2);
$L4->apply_unsafe($R2);
$L4->apply_unsafe($S2);
$L4->apply_unsafe($T2);
$L4->apply_unsafe($U2);
$L4->apply_unsafe($V2);
$L4->apply_unsafe($W2);
$L4->apply_unsafe($X2);
$L4->apply_unsafe($Y2);
$L4->apply_unsafe($Z2);
$L4->apply_unsafe($c3);
$L4->apply_unsafe($d3);
$L4->apply_unsafe($e3);
$L4->apply_unsafe($f3);
$L4->apply_unsafe($g3);
$L4->apply_unsafe($h3);
$L4->apply_unsafe($i3);
$L4->apply_unsafe($j3);
$L4->apply_unsafe($k3);
$L4->apply_unsafe($l3);
$L4->apply_unsafe($m3);
$L4->apply_unsafe($n3);
$L4->apply_unsafe($o3);
$L4->apply_unsafe($p3);
$L4->apply_unsafe($y3);
$L4->apply_unsafe($q3);
$L4->apply_unsafe($z3);
$L4->apply_unsafe($r3);
$L4->apply_unsafe($s3);
$L4->apply_unsafe($t3);
$L4->apply_unsafe($u3);
$L4->apply_unsafe($v3);
$s5->apply_unsafe($M2);
$s5->apply_unsafe($N2);
$s5->apply_unsafe($M4);
$s5->apply_unsafe($O2);
$s5->apply_unsafe($N4);
$s5->apply_unsafe($P2);
$s5->apply_unsafe($O4);
$s5->apply_unsafe($Q2);
$s5->apply_unsafe($P4);
$s5->apply_unsafe($R2);
$s5->apply_unsafe($Q4);
$s5->apply_unsafe($S2);
$s5->apply_unsafe($R4);
$s5->apply_unsafe($T2);
$s5->apply_unsafe($S4);
$s5->apply_unsafe($U2);
$s5->apply_unsafe($T4);
$s5->apply_unsafe($V2);
$s5->apply_unsafe($U4);
$s5->apply_unsafe($W2);
$s5->apply_unsafe($V4);
$s5->apply_unsafe($X2);
$s5->apply_unsafe($W4);
$s5->apply_unsafe($Y2);
$s5->apply_unsafe($X4);
$s5->apply_unsafe($Z2);
$s5->apply_unsafe($Y4);
$s5->apply_unsafe($c3);
$s5->apply_unsafe($Z4);
$s5->apply_unsafe($d3);
$s5->apply_unsafe($c5);
$s5->apply_unsafe($e3);
$s5->apply_unsafe($d5);
$s5->apply_unsafe($f3);
$s5->apply_unsafe($S3);
$s5->apply_unsafe($g3);
$s5->apply_unsafe($e5);
$s5->apply_unsafe($h3);
$s5->apply_unsafe($F);
$s5->apply_unsafe($i3);
$s5->apply_unsafe($u);
$s5->apply_unsafe($j3);
$s5->apply_unsafe($f5);
$s5->apply_unsafe($k3);
$s5->apply_unsafe($g5);
$s5->apply_unsafe($l3);
$s5->apply_unsafe($h5);
$s5->apply_unsafe($m3);
$s5->apply_unsafe($Q3);
$s5->apply_unsafe($n3);
$s5->apply_unsafe($e4);
$s5->apply_unsafe($o3);
$s5->apply_unsafe($i5);
$s5->apply_unsafe($p3);
$s5->apply_unsafe($y3);
$s5->apply_unsafe($q3);
$s5->apply_unsafe($z3);
$s5->apply_unsafe($r3);
$s5->apply_unsafe($j5);
$s5->apply_unsafe($s3);
$s5->apply_unsafe($t3);
$s5->apply_unsafe($u3);
$s5->apply_unsafe($k5);
$s5->apply_unsafe($v3);
$D5->apply_unsafe($M2);
$D5->apply_unsafe($N2);
$D5->apply_unsafe($O2);
$D5->apply_unsafe($P2);
$D5->apply_unsafe($Q2);
$D5->apply_unsafe($R2);
$D5->apply_unsafe($S2);
$D5->apply_unsafe($T2);
$D5->apply_unsafe($U2);
$D5->apply_unsafe($V2);
$D5->apply_unsafe($W2);
$D5->apply_unsafe($X2);
$D5->apply_unsafe($Y2);
$D5->apply_unsafe($Z2);
$D5->apply_unsafe($c3);
$D5->apply_unsafe($d3);
$D5->apply_unsafe($e3);
$D5->apply_unsafe($d5);
$D5->apply_unsafe($f3);
$D5->apply_unsafe($S3);
$D5->apply_unsafe($g3);
$D5->apply_unsafe($e5);
$D5->apply_unsafe($h3);
$D5->apply_unsafe($i3);
$D5->apply_unsafe($j3);
$D5->apply_unsafe($k3);
$D5->apply_unsafe($l3);
$D5->apply_unsafe($m3);
$D5->apply_unsafe($Q3);
$D5->apply_unsafe($n3);
$D5->apply_unsafe($e4);
$D5->apply_unsafe($o3);
$D5->apply_unsafe($p3);
$D5->apply_unsafe($y3);
$D5->apply_unsafe($q3);
$D5->apply_unsafe($z3);
$D5->apply_unsafe($r3);
$D5->apply_unsafe($s3);
$D5->apply_unsafe($t3);
$D5->apply_unsafe($u3);
$D5->apply_unsafe($v3);
$P5->apply_unsafe($M2);
$P5->apply_unsafe($N2);
$P5->apply_unsafe($O2);
$P5->apply_unsafe($P2);
$P5->apply_unsafe($Q2);
$P5->apply_unsafe($R2);
$P5->apply_unsafe($S2);
$P5->apply_unsafe($T2);
$P5->apply_unsafe($U2);
$P5->apply_unsafe($V2);
$P5->apply_unsafe($W2);
$P5->apply_unsafe($X2);
$P5->apply_unsafe($Y2);
$P5->apply_unsafe($Z2);
$P5->apply_unsafe($c3);
$P5->apply_unsafe($d3);
$P5->apply_unsafe($e3);
$P5->apply_unsafe($f3);
$P5->apply_unsafe($S3);
$P5->apply_unsafe($g3);
$P5->apply_unsafe($h3);
$P5->apply_unsafe($i3);
$P5->apply_unsafe($j3);
$P5->apply_unsafe($k3);
$P5->apply_unsafe($l3);
$P5->apply_unsafe($m3);
$P5->apply_unsafe($n3);
$P5->apply_unsafe($o3);
$P5->apply_unsafe($p3);
$P5->apply_unsafe($y3);
$P5->apply_unsafe($q3);
$P5->apply_unsafe($z3);
$P5->apply_unsafe($r3);
$P5->apply_unsafe($s3);
$P5->apply_unsafe($t3);
$P5->apply_unsafe($u3);
$P5->apply_unsafe($v3);
$Z5->apply_unsafe($M2);
$Z5->apply_unsafe($N2);
$Z5->apply_unsafe($O2);
$Z5->apply_unsafe($P2);
$Z5->apply_unsafe($Q2);
$Z5->apply_unsafe($R2);
$Z5->apply_unsafe($S2);
$Z5->apply_unsafe($T2);
$Z5->apply_unsafe($U2);
$Z5->apply_unsafe($V2);
$Z5->apply_unsafe($W2);
$Z5->apply_unsafe($X2);
$Z5->apply_unsafe($Y2);
$Z5->apply_unsafe($Z2);
$Z5->apply_unsafe($c3);
$Z5->apply_unsafe($d3);
$Z5->apply_unsafe($e3);
$Z5->apply_unsafe($f3);
$Z5->apply_unsafe($S3);
$Z5->apply_unsafe($g3);
$Z5->apply_unsafe($h3);
$Z5->apply_unsafe($i3);
$Z5->apply_unsafe($j3);
$Z5->apply_unsafe($k3);
$Z5->apply_unsafe($l3);
$Z5->apply_unsafe($m3);
$Z5->apply_unsafe($n3);
$Z5->apply_unsafe($o3);
$Z5->apply_unsafe($p3);
$Z5->apply_unsafe($y3);
$Z5->apply_unsafe($q3);
$Z5->apply_unsafe($z3);
$Z5->apply_unsafe($r3);
$Z5->apply_unsafe($s3);
$Z5->apply_unsafe($t3);
$Z5->apply_unsafe($u3);
$Z5->apply_unsafe($v3);
$i6->apply_unsafe($M2);
$i6->apply_unsafe($N2);
$i6->apply_unsafe($O2);
$i6->apply_unsafe($P2);
$i6->apply_unsafe($Q2);
$i6->apply_unsafe($R2);
$i6->apply_unsafe($S2);
$i6->apply_unsafe($T2);
$i6->apply_unsafe($U2);
$i6->apply_unsafe($V2);
$i6->apply_unsafe($W2);
$i6->apply_unsafe($X2);
$i6->apply_unsafe($Y2);
$i6->apply_unsafe($Z2);
$i6->apply_unsafe($c3);
$i6->apply_unsafe($d3);
$i6->apply_unsafe($e3);
$i6->apply_unsafe($f3);
$i6->apply_unsafe($S3);
$i6->apply_unsafe($g3);
$i6->apply_unsafe($h3);
$i6->apply_unsafe($i3);
$i6->apply_unsafe($j3);
$i6->apply_unsafe($k3);
$i6->apply_unsafe($l3);
$i6->apply_unsafe($m3);
$i6->apply_unsafe($n3);
$i6->apply_unsafe($o3);
$i6->apply_unsafe($p3);
$i6->apply_unsafe($y3);
$i6->apply_unsafe($q3);
$i6->apply_unsafe($z3);
$i6->apply_unsafe($r3);
$i6->apply_unsafe($s3);
$i6->apply_unsafe($t3);
$i6->apply_unsafe($u3);
$i6->apply_unsafe($v3);
$p6->apply_unsafe($M2);
$p6->apply_unsafe($N2);
$p6->apply_unsafe($O2);
$p6->apply_unsafe($P2);
$p6->apply_unsafe($Q2);
$p6->apply_unsafe($R2);
$p6->apply_unsafe($S2);
$p6->apply_unsafe($T2);
$p6->apply_unsafe($U2);
$p6->apply_unsafe($V2);
$p6->apply_unsafe($W2);
$p6->apply_unsafe($X2);
$p6->apply_unsafe($Y2);
$p6->apply_unsafe($Z2);
$p6->apply_unsafe($c3);
$p6->apply_unsafe($d3);
$p6->apply_unsafe($e3);
$p6->apply_unsafe($f3);
$p6->apply_unsafe($S3);
$p6->apply_unsafe($g3);
$p6->apply_unsafe($h3);
$p6->apply_unsafe($i3);
$p6->apply_unsafe($j3);
$p6->apply_unsafe($k3);
$p6->apply_unsafe($l3);
$p6->apply_unsafe($m3);
$p6->apply_unsafe($n3);
$p6->apply_unsafe($o3);
$p6->apply_unsafe($p3);
$p6->apply_unsafe($y3);
$p6->apply_unsafe($q3);
$p6->apply_unsafe($z3);
$p6->apply_unsafe($r3);
$p6->apply_unsafe($s3);
$p6->apply_unsafe($t3);
$p6->apply_unsafe($u3);
$p6->apply_unsafe($v3);
$w6->apply_unsafe($M2);
$w6->apply_unsafe($N2);
$w6->apply_unsafe($O2);
$w6->apply_unsafe($P2);
$w6->apply_unsafe($Q2);
$w6->apply_unsafe($R2);
$w6->apply_unsafe($S2);
$w6->apply_unsafe($T2);
$w6->apply_unsafe($U2);
$w6->apply_unsafe($V2);
$w6->apply_unsafe($W2);
$w6->apply_unsafe($X2);
$w6->apply_unsafe($Y2);
$w6->apply_unsafe($Z2);
$w6->apply_unsafe($c3);
$w6->apply_unsafe($d3);
$w6->apply_unsafe($e3);
$w6->apply_unsafe($f3);
$w6->apply_unsafe($S3);
$w6->apply_unsafe($g3);
$w6->apply_unsafe($h3);
$w6->apply_unsafe($i3);
$w6->apply_unsafe($j3);
$w6->apply_unsafe($k3);
$w6->apply_unsafe($l3);
$w6->apply_unsafe($m3);
$w6->apply_unsafe($n3);
$w6->apply_unsafe($o3);
$w6->apply_unsafe($p3);
$w6->apply_unsafe($y3);
$w6->apply_unsafe($q3);
$w6->apply_unsafe($z3);
$w6->apply_unsafe($r3);
$w6->apply_unsafe($s3);
$w6->apply_unsafe($t3);
$w6->apply_unsafe($u3);
$w6->apply_unsafe($v3);
$M6->apply_unsafe($M2);
$M6->apply_unsafe($N2);
$M6->apply_unsafe($O2);
$M6->apply_unsafe($P2);
$M6->apply_unsafe($Q2);
$M6->apply_unsafe($R2);
$M6->apply_unsafe($S2);
$M6->apply_unsafe($T2);
$M6->apply_unsafe($U2);
$M6->apply_unsafe($V2);
$M6->apply_unsafe($W2);
$M6->apply_unsafe($X2);
$M6->apply_unsafe($Y2);
$M6->apply_unsafe($Z2);
$M6->apply_unsafe($c3);
$M6->apply_unsafe($d3);
$M6->apply_unsafe($e3);
$M6->apply_unsafe($f3);
$M6->apply_unsafe($g3);
$M6->apply_unsafe($h3);
$M6->apply_unsafe($i3);
$M6->apply_unsafe($u);
$M6->apply_unsafe($j3);
$M6->apply_unsafe($k3);
$M6->apply_unsafe($l3);
$M6->apply_unsafe($m3);
$M6->apply_unsafe($Q3);
$M6->apply_unsafe($n3);
$M6->apply_unsafe($e4);
$M6->apply_unsafe($o3);
$M6->apply_unsafe($p3);
$M6->apply_unsafe($y3);
$M6->apply_unsafe($q3);
$M6->apply_unsafe($r3);
$M6->apply_unsafe($s3);
$M6->apply_unsafe($t3);
$M6->apply_unsafe($u3);
$M6->apply_unsafe($v3);
$T6->apply_unsafe($M2);
$T6->apply_unsafe($N2);
$T6->apply_unsafe($O2);
$T6->apply_unsafe($P2);
$T6->apply_unsafe($Q2);
$T6->apply_unsafe($R2);
$T6->apply_unsafe($S2);
$T6->apply_unsafe($T2);
$T6->apply_unsafe($U2);
$T6->apply_unsafe($V2);
$T6->apply_unsafe($W2);
$T6->apply_unsafe($X2);
$T6->apply_unsafe($Y2);
$T6->apply_unsafe($Z2);
$T6->apply_unsafe($c3);
$T6->apply_unsafe($d3);
$T6->apply_unsafe($e3);
$T6->apply_unsafe($f3);
$T6->apply_unsafe($g3);
$T6->apply_unsafe($h3);
$T6->apply_unsafe($i3);
$T6->apply_unsafe($j3);
$T6->apply_unsafe($k3);
$T6->apply_unsafe($l3);
$T6->apply_unsafe($m3);
$T6->apply_unsafe($n3);
$T6->apply_unsafe($o3);
$T6->apply_unsafe($p3);
$T6->apply_unsafe($q3);
$T6->apply_unsafe($r3);
$T6->apply_unsafe($s3);
$T6->apply_unsafe($t3);
$T6->apply_unsafe($u3);
$T6->apply_unsafe($v3);
$A7->apply_unsafe($M4);
$U7->apply_unsafe($N4);
$U7->apply_unsafe($O4);
$U7->apply_unsafe($P4);
$U7->apply_unsafe($Q4);
$U7->apply_unsafe($R4);
$U7->apply_unsafe($S4);
$U7->apply_unsafe($T4);
$U7->apply_unsafe($U4);
$U7->apply_unsafe($V4);
$U7->apply_unsafe($W4);
$U7->apply_unsafe($X4);
$q8->apply_unsafe($N4);
$q8->apply_unsafe($O4);
$q8->apply_unsafe($P4);
$q8->apply_unsafe($Q4);
$q8->apply_unsafe($R4);
$q8->apply_unsafe($S4);
$q8->apply_unsafe($T4);
$q8->apply_unsafe($U4);
$q8->apply_unsafe($V4);
$q8->apply_unsafe($W4);
$q8->apply_unsafe($X4);
$y8->apply_unsafe($N4);
$y8->apply_unsafe($O4);
$y8->apply_unsafe($P4);
$y8->apply_unsafe($Q4);
$y8->apply_unsafe($R4);
$y8->apply_unsafe($S4);
$y8->apply_unsafe($T4);
$y8->apply_unsafe($U4);
$y8->apply_unsafe($V4);
$y8->apply_unsafe($W4);
$y8->apply_unsafe($X4);
$K8->apply_unsafe($N4);
$K8->apply_unsafe($O4);
$K8->apply_unsafe($P4);
$K8->apply_unsafe($Q4);
$K8->apply_unsafe($R4);
$K8->apply_unsafe($S4);
$K8->apply_unsafe($T4);
$K8->apply_unsafe($U4);
$K8->apply_unsafe($V4);
$K8->apply_unsafe($W4);
$K8->apply_unsafe($X4);
$W8->apply_unsafe($N4);
$W8->apply_unsafe($O4);
$W8->apply_unsafe($P4);
$W8->apply_unsafe($Q4);
$W8->apply_unsafe($R4);
$W8->apply_unsafe($S4);
$W8->apply_unsafe($T4);
$W8->apply_unsafe($U4);
$W8->apply_unsafe($V4);
$W8->apply_unsafe($W4);
$W8->apply_unsafe($X4);
$k9->apply_unsafe($N4);
$k9->apply_unsafe($O4);
$k9->apply_unsafe($P4);
$k9->apply_unsafe($Q4);
$k9->apply_unsafe($R4);
$k9->apply_unsafe($S4);
$k9->apply_unsafe($T4);
$k9->apply_unsafe($U4);
$k9->apply_unsafe($V4);
$k9->apply_unsafe($W4);
$k9->apply_unsafe($X4);
$u9->apply_unsafe($N4);
$O9->apply_unsafe($N4);
$ga->apply_unsafe($P2);
$ga->apply_unsafe($Q2);
$ga->apply_unsafe($R2);
$ga->apply_unsafe($S2);
$ga->apply_unsafe($T2);
$ga->apply_unsafe($U2);
$ga->apply_unsafe($V2);
$ga->apply_unsafe($W2);
$ga->apply_unsafe($X2);
$ga->apply_unsafe($Y2);
$ga->apply_unsafe($Z2);
$va->apply_unsafe($O4);
$Ca->apply_unsafe($O4);
$Wa->apply_unsafe($P4);
$fb->apply_unsafe($P4);
$zb->apply_unsafe($P4);
$Xb->apply_unsafe($P4);
$hc->apply_unsafe($P4);
$xc->apply_unsafe($P4);
$Vc->apply_unsafe($Q4);
$ed->apply_unsafe($Q4);
$md->apply_unsafe($Q4);
$Cd->apply_unsafe($Q4);
$Nd->apply_unsafe($Q4);
$Xd->apply_unsafe($Q4);
$xe->apply_unsafe($R4);
$Fe->apply_unsafe($R4);
$Me->apply_unsafe($R4);
$jf->apply_unsafe($R4);
$Jf->apply_unsafe($S4);
$Qf->apply_unsafe($S4);
$Yf->apply_unsafe($S4);
$ng->apply_unsafe($S4);
$Dg->apply_unsafe($S4);
$gh->apply_unsafe($T4);
$nh->apply_unsafe($T4);
$uh->apply_unsafe($T4);
$Eh->apply_unsafe($T4);
$ri->apply_unsafe($si);
$Ci->apply_unsafe($U4);
$Pi->apply_unsafe($U4);
$yj->apply_unsafe($W4);
$Ij->apply_unsafe($W4);
$Uj->apply_unsafe($W4);
$gk->apply_unsafe($W4);
$wk->apply_unsafe($W4);
$el->apply_unsafe($X4);
$ll->apply_unsafe($X4);
$zl->apply_unsafe($X4);
$Xl->apply_unsafe($Y4);
$Xl->apply_unsafe($Z4);
$Xl->apply_unsafe($c5);
$Xl->apply_unsafe($k5);
$lm->apply_unsafe($Y4);
$lm->apply_unsafe($Z4);
$lm->apply_unsafe($c5);
$lm->apply_unsafe($k5);
$Bm->apply_unsafe($Y4);
$Bm->apply_unsafe($Z4);
$Bm->apply_unsafe($c5);
$Vm->apply_unsafe($Y4);
$Vm->apply_unsafe($Z4);
$Vm->apply_unsafe($c5);
$on->apply_unsafe($c3);
$on->apply_unsafe($d3);
$on->apply_unsafe($e3);
$In->apply_unsafe($Z4);
$Pn->apply_unsafe($Z4);
$Zn->apply_unsafe($Z4);
$no->apply_unsafe($Z4);
$Ko->apply_unsafe($d3);
$fp->apply_unsafe($c5);
$mp->apply_unsafe($c5);
$Ip->apply_unsafe($S3);
$eq->apply_unsafe($e5);
$kq->apply_unsafe($e5);
$Fq->apply_unsafe($F);
$Lq->apply_unsafe($F);
$Sq->apply_unsafe($F);
$dr->apply_unsafe($F);
$Er->apply_unsafe($u);
$Sr->apply_unsafe($u);
$es->apply_unsafe($u);
$ms->apply_unsafe($u);
$Hs->apply_unsafe($f5);
$Rs->apply_unsafe($si);
$dt->apply_unsafe($f5);
$Qt->apply_unsafe($f5);
$Yt->apply_unsafe($f5);
$Yt->apply_unsafe($h5);
$yu->apply_unsafe($f5);
$yu->apply_unsafe($h5);
$Ou->apply_unsafe($f5);
$Ou->apply_unsafe($h5);
$gv->apply_unsafe($f5);
$Rv->apply_unsafe($Sv);
$ow->apply_unsafe($g5);
$Gw->apply_unsafe($g5);
$Pw->apply_unsafe($g5);
$Zw->apply_unsafe($g5);
$qy->apply_unsafe($Sv);
$Ey->apply_unsafe($h5);
$Ny->apply_unsafe($h5);
$qz->apply_unsafe($Q3);
$wz->apply_unsafe($Q3);
$Dz->apply_unsafe($Q3);
$cA->apply_unsafe($si);
$mA->apply_unsafe($e4);
$sA->apply_unsafe($e4);
$MA->apply_unsafe($i5);
$YA->apply_unsafe($i5);
$hB->apply_unsafe($i5);
$ni::self=$XC;
&$_($v)for@$w;
&$_($G)for@$H;
&$_($N)for@$H;
&$_($T)for@$H;
&$_($d1)for@$w;
&$_($h1)for@$H;
&$_($p1)for@$w;
&$_($t1)for@$H;
&$_($B1)for@$w;
&$_($F1)for@$H;
&$_($P1)for@$H;
&$_($T1)for@$w;
&$_($X1)for@$w;
&$_($d2)for@$w;
&$_($h2)for@$H;
&$_($n2)for@$H;
&$_($v2)for@$w;
&$_($z2)for@$w;
&$_($D2)for@$H;
&$_($J2)for@$H;
&$_($K3)for@$w;
&$_($N3)for@$w;
&$_($R3)for@$T3;
&$_($W3)for@$w;
&$_($Y3)for@$w;
&$_($d4)for@$T3;
&$_($i4)for@$w;
&$_($l4)for@$T3;
&$_($p4)for@$w;
&$_($s4)for@$T3;
&$_($w4)for@$w;
&$_($z4)for@$T3;
&$_($B4)for@$C4;
&$_($F4)for@$w;
&$_($I4)for@$w;
&$_($L4)for@$T3;
&$_($p5)for@$w;
&$_($s5)for@$T3;
&$_($u5)for@$v5;
&$_($A5)for@$w;
&$_($D5)for@$T3;
&$_($F5)for@$G5;
&$_($M5)for@$w;
&$_($P5)for@$T3;
&$_($T5)for@$w;
&$_($W5)for@$w;
&$_($Z5)for@$T3;
&$_($f6)for@$w;
&$_($i6)for@$T3;
&$_($m6)for@$w;
&$_($p6)for@$T3;
&$_($t6)for@$w;
&$_($w6)for@$T3;
&$_($y6)for@$z6;
&$_($B6)for@$C6;
&$_($G6)for@$w;
&$_($J6)for@$w;
&$_($M6)for@$T3;
&$_($Q6)for@$w;
&$_($T6)for@$T3;
&$_($V6)for@$W6;
&$_($h7)for@$i7;
&$_($m7)for@$i7;
&$_($o7)for@$i7;
&$_($q7)for@$i7;
&$_($x7)for@$w;
&$_($A7)for@$T3;
&$_($C7)for@$D7;
&$_($I7)for@$i7;
&$_($R7)for@$w;
&$_($U7)for@$T3;
&$_($Z7)for@$w;
&$_($f8)for@$w;
&$_($j8)for@$w;
&$_($n8)for@$w;
&$_($q8)for@$T3;
&$_($v8)for@$w;
&$_($y8)for@$T3;
&$_($D8)for@$w;
&$_($H8)for@$w;
&$_($K8)for@$T3;
&$_($P8)for@$w;
&$_($T8)for@$w;
&$_($W8)for@$T3;
&$_($d9)for@$w;
&$_($h9)for@$w;
&$_($k9)for@$T3;
&$_($m9)for@$n9;
&$_($r9)for@$w;
&$_($u9)for@$T3;
&$_($z9)for@$w;
&$_($D9)for@$w;
&$_($H9)for@$w;
&$_($L9)for@$w;
&$_($O9)for@$T3;
&$_($Q9)for@$R9;
&$_($da)for@$w;
&$_($ga)for@$T3;
&$_($ia)for@$i7;
&$_($ka)for@$i7;
&$_($sa)for@$w;
&$_($va)for@$T3;
&$_($za)for@$w;
&$_($Ca)for@$T3;
&$_($Ea)for@$Fa;
&$_($Ka)for@$i7;
&$_($Ta)for@$w;
&$_($Wa)for@$T3;
&$_($cb)for@$w;
&$_($fb)for@$T3;
&$_($kb)for@$w;
&$_($ob)for@$w;
&$_($sb)for@$w;
&$_($wb)for@$w;
&$_($zb)for@$T3;
&$_($Eb)for@$w;
&$_($Ib)for@$w;
&$_($Mb)for@$w;
&$_($Qb)for@$w;
&$_($Ub)for@$w;
&$_($Xb)for@$T3;
&$_($ec)for@$w;
&$_($hc)for@$T3;
&$_($mc)for@$w;
&$_($qc)for@$w;
&$_($uc)for@$w;
&$_($xc)for@$T3;
&$_($zc)for@$Ac;
&$_($Fc)for@$i7;
&$_($Sc)for@$w;
&$_($Vc)for@$T3;
&$_($Zc)for@$w;
&$_($ed)for@$T3;
&$_($jd)for@$w;
&$_($md)for@$T3;
&$_($rd)for@$w;
&$_($vd)for@$w;
&$_($zd)for@$w;
&$_($Cd)for@$T3;
&$_($Gd)for@$w;
&$_($Kd)for@$w;
&$_($Nd)for@$T3;
&$_($Rd)for@$w;
&$_($Ud)for@$w;
&$_($Xd)for@$T3;
&$_($Zd)for@$ce;
&$_($he)for@$i7;
&$_($ue)for@$w;
&$_($xe)for@$T3;
&$_($Ce)for@$w;
&$_($Fe)for@$T3;
&$_($Je)for@$w;
&$_($Me)for@$T3;
&$_($Qe)for@$w;
&$_($Ue)for@$w;
&$_($Xe)for@$w;
&$_($df)for@$w;
&$_($gf)for@$w;
&$_($jf)for@$T3;
&$_($lf)for@$mf;
&$_($rf)for@$i7;
&$_($Cf)for@$w;
&$_($Gf)for@$w;
&$_($Jf)for@$T3;
&$_($Nf)for@$w;
&$_($Qf)for@$T3;
&$_($Vf)for@$w;
&$_($Yf)for@$T3;
&$_($eg)for@$w;
&$_($hg)for@$w;
&$_($kg)for@$w;
&$_($ng)for@$T3;
&$_($sg)for@$w;
&$_($wg)for@$w;
&$_($Ag)for@$w;
&$_($Dg)for@$T3;
&$_($Fg)for@$Gg;
&$_($Lg)for@$i7;
&$_($Tg)for@$w;
&$_($Xg)for@$w;
&$_($dh)for@$w;
&$_($gh)for@$T3;
&$_($kh)for@$w;
&$_($nh)for@$T3;
&$_($rh)for@$w;
&$_($uh)for@$T3;
&$_($yh)for@$w;
&$_($Bh)for@$w;
&$_($Eh)for@$T3;
&$_($Gh)for@$Hh;
&$_($Nh)for@$i7;
&$_($di)for@$w;
&$_($gi)for@$w;
&$_($ki)for@$w;
&$_($oi)for@$w;
&$_($ri)for@$T3;
&$_($zi)for@$w;
&$_($Ci)for@$T3;
&$_($Gi)for@$w;
&$_($Ji)for@$w;
&$_($Mi)for@$w;
&$_($Pi)for@$T3;
&$_($Ri)for@$Si;
&$_($Xi)for@$i7;
&$_($rj)for@$w;
&$_($vj)for@$w;
&$_($yj)for@$T3;
&$_($Cj)for@$w;
&$_($Fj)for@$w;
&$_($Ij)for@$T3;
&$_($Nj)for@$w;
&$_($Rj)for@$w;
&$_($Uj)for@$T3;
&$_($Yj)for@$w;
&$_($dk)for@$w;
&$_($gk)for@$T3;
&$_($kk)for@$w;
&$_($nk)for@$w;
&$_($qk)for@$w;
&$_($tk)for@$w;
&$_($wk)for@$T3;
&$_($yk)for@$zk;
&$_($Ek)for@$i7;
&$_($Rk)for@$w;
&$_($Vk)for@$w;
&$_($Zk)for@$w;
&$_($el)for@$T3;
&$_($il)for@$w;
&$_($ll)for@$T3;
&$_($pl)for@$w;
&$_($tl)for@$w;
&$_($wl)for@$w;
&$_($zl)for@$T3;
&$_($Bl)for@$Cl;
&$_($Hl)for@$i7;
&$_($Ul)for@$w;
&$_($Xl)for@$T3;
&$_($em)for@$w;
&$_($im)for@$w;
&$_($lm)for@$T3;
&$_($nm)for@$om;
&$_($sm)for@$w;
&$_($vm)for@$w;
&$_($ym)for@$w;
&$_($Bm)for@$T3;
&$_($Gm)for@$w;
&$_($Km)for@$w;
&$_($Om)for@$w;
&$_($Sm)for@$w;
&$_($Vm)for@$T3;
&$_($Xm)for@$Ym;
&$_($hn)for@$i7;
&$_($ln)for@$w;
&$_($on)for@$T3;
&$_($qn)for@$i7;
&$_($zn)for@$w;
&$_($Bn)for@$w;
&$_($Fn)for@$w;
&$_($In)for@$T3;
&$_($Mn)for@$w;
&$_($Pn)for@$T3;
&$_($Tn)for@$w;
&$_($Wn)for@$w;
&$_($Zn)for@$T3;
&$_($go)for@$w;
&$_($ko)for@$w;
&$_($no)for@$T3;
&$_($ro)for@$so;
&$_($zo)for@$w;
&$_($Do)for@$w;
&$_($Ho)for@$w;
&$_($Ko)for@$T3;
&$_($Mo)for@$i7;
&$_($cp)for@$w;
&$_($fp)for@$T3;
&$_($jp)for@$w;
&$_($mp)for@$T3;
&$_($op)for@$pp;
&$_($up)for@$i7;
&$_($Fp)for@$w;
&$_($Ip)for@$T3;
&$_($Kp)for@$Lp;
&$_($Rp)for@$i7;
&$_($Zp)for@$w;
&$_($eq)for@$T3;
&$_($hq)for@$w;
&$_($kq)for@$T3;
&$_($mq)for@$nq;
&$_($sq)for@$i7;
&$_($Cq)for@$w;
&$_($Fq)for@$T3;
&$_($Iq)for@$w;
&$_($Lq)for@$T3;
&$_($Pq)for@$w;
&$_($Sq)for@$T3;
&$_($Vq)for@$w;
&$_($Yq)for@$w;
&$_($dr)for@$T3;
&$_($fr)for@$gr;
&$_($lr)for@$i7;
&$_($wr)for@$w;
&$_($zr)for@$w;
&$_($Br)for@$w;
&$_($Er)for@$T3;
&$_($Ir)for@$w;
&$_($Lr)for@$w;
&$_($Pr)for@$w;
&$_($Sr)for@$T3;
&$_($Wr)for@$w;
&$_($Zr)for@$w;
&$_($es)for@$T3;
&$_($js)for@$w;
&$_($ms)for@$T3;
&$_($os)for@$ps;
&$_($us)for@$i7;
&$_($Es)for@$w;
&$_($Hs)for@$T3;
&$_($Os)for@$w;
&$_($Rs)for@$T3;
&$_($Ys)for@$w;
&$_($dt)for@$T3;
&$_($it)for@$w;
&$_($mt)for@$w;
&$_($qt)for@$w;
&$_($ut)for@$w;
&$_($yt)for@$w;
&$_($Ct)for@$w;
&$_($Gt)for@$w;
&$_($Kt)for@$w;
&$_($Nt)for@$w;
&$_($Qt)for@$T3;
&$_($Vt)for@$w;
&$_($Yt)for@$T3;
&$_($fu)for@$w;
&$_($ju)for@$w;
&$_($nu)for@$w;
&$_($ru)for@$w;
&$_($vu)for@$w;
&$_($yu)for@$T3;
&$_($Du)for@$w;
&$_($Hu)for@$w;
&$_($Lu)for@$w;
&$_($Ou)for@$T3;
&$_($Tu)for@$w;
&$_($Xu)for@$w;
&$_($dv)for@$w;
&$_($gv)for@$T3;
&$_($iv)for@$jv;
&$_($ov)for@$i7;
&$_($yv)for@$w;
&$_($Cv)for@$w;
&$_($Gv)for@$w;
&$_($Kv)for@$w;
&$_($Ov)for@$w;
&$_($Rv)for@$T3;
&$_($fw)for@$w;
&$_($iw)for@$w;
&$_($lw)for@$w;
&$_($ow)for@$T3;
&$_($sw)for@$w;
&$_($vw)for@$w;
&$_($yw)for@$w;
&$_($Bw)for@$w;
&$_($Dw)for@$w;
&$_($Gw)for@$T3;
&$_($Jw)for@$w;
&$_($Mw)for@$w;
&$_($Pw)for@$T3;
&$_($Tw)for@$w;
&$_($Ww)for@$w;
&$_($Zw)for@$T3;
&$_($dx)for@$ex;
&$_($jx)for@$i7;
&$_($tx)for@$w;
&$_($xx)for@$w;
&$_($Bx)for@$w;
&$_($Fx)for@$w;
&$_($Jx)for@$w;
&$_($Nx)for@$w;
&$_($Rx)for@$w;
&$_($Vx)for@$w;
&$_($Zx)for@$w;
&$_($fy)for@$w;
&$_($jy)for@$w;
&$_($ny)for@$w;
&$_($qy)for@$T3;
&$_($By)for@$w;
&$_($Ey)for@$T3;
&$_($Hy)for@$w;
&$_($Ky)for@$w;
&$_($Ny)for@$T3;
&$_($Py)for@$Qy;
&$_($Vy)for@$i7;
&$_($hz)for@$w;
&$_($jz)for@$w;
&$_($qz)for@$T3;
&$_($tz)for@$w;
&$_($wz)for@$T3;
&$_($Az)for@$w;
&$_($Dz)for@$T3;
&$_($Fz)for@$Gz;
&$_($Mz)for@$i7;
&$_($Tz)for@$w;
&$_($Xz)for@$w;
&$_($cA)for@$T3;
&$_($jA)for@$w;
&$_($mA)for@$T3;
&$_($pA)for@$w;
&$_($sA)for@$T3;
&$_($uA)for@$vA;
&$_($BA)for@$i7;
&$_($JA)for@$w;
&$_($MA)for@$T3;
&$_($RA)for@$w;
&$_($VA)for@$w;
&$_($YA)for@$T3;
&$_($eB)for@$w;
&$_($hB)for@$T3;
&$_($jB)for@$kB;
&$_($pB)for@$i7;
&$_($xB)for@$yB;
&$_($DB)for@$i7;
&$_($MB)for@$NB;
&$_($SB)for@$i7;
&$_($cC)for@$dC;
&$_($xC)for@$yC;
&$_($AC)for@$dC;
&$_($FC)for@$w;
&$_($JC)for@$w;
&$_($NC)for@$w;
&$_($RC)for@$w;
&$_($VC)for@$w;
&$_($XC)for@$YC;
ni->run(@ARGV);
__DATA__

Time conversion functions.
Dependency-free functions that do various time-conversion tasks for you in a
standardized way. They include:

| @parts = tep($elements, $epoch): convert an epoch to specified pieces
  $epoch = tpe($elements, @values): convert values to an epoch

Everything always happens in UTC. If you want a different timezone, you'll need
to shift your epochs by some multiple of 3600.

use POSIX ();

use constant time_pieces => 'SMHdmYwjDN';

our $mktime_error = 0;          # bugfix for OSX

sub time_element_indexes($) {map index(time_pieces, $_), split //, $_[0]}

sub time_epoch_pieces($;$) {
  local $_;
  my ($es, $t) = $_[0] =~ /^[SMHdmYwjDN]+$/ ? @_ : ('YmdHMS', @_);
  my @pieces = gmtime $t;
  push @pieces, int(1_000_000_000 * ($t - int $t));
  $pieces[5] += 1900;
  $pieces[4]++;
  @pieces[time_element_indexes $es];
}

sub time_pieces_epoch {
  local $_;
  my ($es, @ps) = $_[0] =~ /^[SMHdmYwjDN]+$/ ? @_ : ('YmdHMS', @_);
  my @tvs = (0, 0, 0, 1, 1, 1970, 0, 0, -1, 0);
  @tvs[time_element_indexes $es] = @ps;
  $tvs[5] -= 1900;
  $tvs[4]--;
  POSIX::mktime(@tvs[0..5]) + $tvs[9] / 1_000_000_000 - $mktime_error;
}

Approximate timezone shifts by lat/lng.
Uses the Bilow-Steinmetz approximation to quickly calculate a timezone offset
(in seconds, which can be added to a GMT epoch) for a given latitude/longitude.
It may be off by a few hours but is generally unbiased.

sub timezone_seconds {
  my ($lat, $lng) = @_;
  240 * int($lng + 7);
}

{
  my $t = time;
  $mktime_error = time_pieces_epoch(time_epoch_pieces $t) - $t;
}

c
BEGIN {
  *tep  = \&time_epoch_pieces;
  *tpe  = \&time_pieces_epoch;
  *tsec = \&timezone_seconds;
}

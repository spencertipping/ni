// Rendering support.
// Rendering is treated like an asynchronous operation against the axis buffers. It ends up being re-entrant so we don't lock the browser thread, but those
// details are all hidden inside a render request.

caterwaul(':all')(function () {
  render(state = null, last_render = 0, frames_requested = 0)
        (axes, vm, l0, deadline, sr, ctx, w, h, cb) = state /eq[{a: axes, vm: vm, ctx: ctx, w: w, h: h, i: 0, vt: n[4] *[vm.transformer(x)] -seq, l: 0, l0: l0,
                                                                 deadline: deadline, total_shade: 0, saturation_rate: sr /!Math.exp, cb: cb,
                                                                 id: state && state.id && state.ctx === ctx && state.w === w && state.h === h
                                                                       ? state.id
                                                                       : ctx.getImageData(0, 0, w, h)}]
                                                      -then- request_frame()

// Render function.
// This is kind of subtle, so I'll explain how it all works. My liberal use of scare quotes is indicative of the amount of duplicity going on around here.

// Rendering happens "asynchronously" -- that is, it's a time-bounded, reentrant process. The outermost loop governing the whole rendering process is driven by
// requestAnimationFrame(), which calls into render_part(). render_part() runs for about 20ms, rendering 1/4096th "random" slices of the data until it runs out of
// time. The assumption here is that 1/4096th of the data takes under 20ms, which empirically has been true on my machine.

// The renderer works by modifying RGBA values in an ImageData object, which is a little tricky because all of the drawing operations need to be translucent:
// conceptually we're rendering a volume rather than an opaque object. We also log-scale(-ish) the light output on the screen, so brightness(pixel) ~ log(volume
// depth). This is all done without storing any extra per-pixel state. Here's a full list of the shader properties we want:

// | 1. Singly-shaded pixels should be visible: i.e. rendered at rgb >= 64 (except for obvious counter-cases like slice focusing or distant points).
//   2. Multiply-shaded pixels should converge to full luminosity _and preserve color_, with luminosity ~ log(total volume depth).
//   3. Pixels should eventually saturate to white, losing color resolution as they gain luminosity. This should approximately double the dynamic range.
//   4. The algorithm should be properly additive so that antialiasing works (we want 2x2 subpixel rendering).
//   5. A bunch of very dim points should converge to the right color average (i.e. we can't lose too much detail to 8-bit quantization).
//   6. The total onscreen brightness should remain about the same regardless of how many points are on the screen (otherwise zooming would dim the display).

// So here's roughly how this all works. The RGB channels store full-value color all the time: this is a brightness-weighted average of the colors drawn into that
// pixel. Brightness is stored in the alpha channel and converges to 255 by an exponential series if all points are rendered at the same intensity.

// Point intensity is randomized for every pixel shading operation. We do this to break through the quantization artifacts we'd get if the intensity were
// constantly low.

  -where[slice_size      = 4096,
         slices          = n[slice_size] -seq -re- it.sort("Math.random() - 0.5".qf),
         request_frame() = render_part /!requestAnimationFrame -then- ++frames_requested -unless.frames_requested,
         render_part     = function () {

// Render state.
// Local variables for the axes and coordinate transformations, some misc stuff, and our luminosity adjustment and shade tracking. The luminosity adjustment is
// modified each iteration as we figure out how dense our shading is empirically; state.l0, the "target luminosity", is measured in full shades per screen pixel.
// Here's the calculation:

// | initial_l = target_shade_per_pixel * pixels / data_points / 10;
//   next_l    = target_shade_per_pixel * pixels / (actual_shading_so_far / layers_so_far * total_layers);

    --frames_requested;
    var ax = state.a[0], ay = state.a[1],                  xt = state.vt[0], yt = state.vt[1], width  = state.id.width,
        az = state.a[2], aw = state.a[3], aq = state.a[4], zt = state.vt[2], wt = state.vt[3], height = state.id.height,
        id = state.id.data, n = state.a[0].end(), use_hue = !!aw, cx = width >> 1, cy = height >> 1,
        l  = state.l || state.l0 * width*height / n / 10, total_shade = state.total_shade, s = width /-Math.min/ height >> 1,
        sr = state.saturation_rate;

    if (state.cb)                                 state.cb(state.i, slice_size);
    if (state.i < slice_size && !state.deadline)  request_frame();
    if (state.i === 0)                            id.fill(0);

    var start = +new Date;
    var stop  = state.deadline || start + 30;
    for (; state.i < slice_size && (state.i < 8 || +new Date < stop); ++state.i) {
      for (var j = slices[state.i]; j < n; j += slice_size) {
        var w  = aw ? j /!aw.pnorm : 0, x  = ax ? j /!ax.p : 0, y  = ay ? j /!ay.p : 0, z  = az ? j /!az.p : 0,
            wi = 1 / wt(x, y, z),       xp = wi * xt(x, y, z),  yp = wi * yt(x, y, z),  zp = wi * zt(x, y, z),
            q  = aq ? j /!aq.pnorm : 1;

        if (zp > 0) {
          w *= 0.8;
          var r  = use_hue ? 1 - 2*(1/2 - Math.abs(.5  - w)) |-Math.min| 1 |-Math.max| 0.1 : 1,
              g  = use_hue ?     2*(1/2 - Math.abs(1/3 - w)) |-Math.min| 1 |-Math.max| 0.1 : 1,
              b  = use_hue ?     2*(1/2 - Math.abs(2/3 - w)) |-Math.min| 1 |-Math.max| 0.1 : 1,
              zi = 1/zp, tx = cx + xp*zi*s, ty = cy - yp*zi*s, sx = tx|0, sy = ty|0;

          if (sx >= 0 && sx < width-1 && sy >= 0 && sy < height-1) {
            tx -= sx; ty -= sy;
            for (var dx = 0; dx <= 1; ++dx)
              for (var dy = 0; dy <= 1; ++dy) {
                var pi = (sy+dy)*width + sx+dx << 2,
                    op = (1 - Math.abs(dx-tx)) * (1 - Math.abs(dy-ty)),
                    lp = id[pi|3] || 64,
                    ci = l * op * (256 - lp) * q,
                    li = ci * zi,
                    d  = sr / (li + lp),
                    cmax = Math.max(r, g, b);

                total_shade += li;
                id[pi|3] += li;
                id[pi|0] = (id[pi|0] * lp + r * 256 * li / cmax) * d;
                id[pi|1] = (id[pi|1] * lp + g * 256 * li / cmax) * d;
                id[pi|2] = (id[pi|2] * lp + b * 256 * li / cmax) * d;
              }
          }
        }
      }

      if (total_shade)
      {
        var target_shade   = state.l0 * width * height;
        var progress       = state.deadline ? (+new Date - start || 1) / (state.deadline - start)
                                            : (state.i + 1) / slice_size;
        var expected_shade = total_shade / progress;
        l = target_shade / expected_shade;
      }
    }

    state.l           = l;
    state.total_shade = total_shade;
    state.ctx.putImageData(state.id, 0, 0);
    last_render = +new Date;
  }]})();

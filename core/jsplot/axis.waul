// A column vector of numeric data.
// Stores a single axis of the data we want to render. It has a fixed capacity and represents a uniform sample if it overflows (i.e. it kicks data points out
// evenly). Because multiple axes need to be coordinated, all random numbers used for sampling are parameters rather than generated here.

// If you want focused nonuniform sampling, you can do it like this:

// | var r = Math.random();
//   r *= axis.focus(data_point, focus_center, focus_scale);
//   // same for other axes
//   axis.push(data_point, r);

// Focusing biases the probability of accepting points so that data closer to the focal plane(s) is preferred.

caterwaul(':all')(function () {
  axis(capacity) = this /-caterwaul.merge/ {data: new Float64Array(capacity), max: null, min: null, n: 0, c: capacity} -re- void 0,
  axis.prototype /-caterwaul.merge/ axis_methods,
  axis           /-caterwaul.merge/ static_methods,

  where[static_methods = capture[focus(x, c, s)     = Math.abs(x - c) / s],

        axis_methods   = capture[reset()            = this -se [this.n = 0, this.min = this.max = null],
                                 set(i, x)          = this -se [this.min = this.min == null ? x : this.min /-Math.min/ x,
                                                                this.max = this.max == null ? x : this.max /-Math.max/ x,
                                                                this.data[i] = x],

                                 offset()           = (this.max + this.min) / 2,
                                 range()            = this.max - this.min,
                                 at(x)              = this.min + x * this.range(),
                                 end()              = this.n /-Math.min/ this.c,
                                 p(i)               = this.data[i],
                                 pnorm(i)           = (this.data[i] - this.offset()) / this.range() + 0.5,

                                 push(x, r)         = this.n++ < this.c ? this.set(this.n - 1, +x) : this /+x /~uniform_push/ r,
                                 uniform_push(x, r) = this.set(r * this.n | 0, x) -when [r * this.n < this.c]]]})();

#!/bin/bash
# Builds the ni image, first by assembling the self-modifying parts (./boot),
# and then by telling it to add modules.

set -euo pipefail
cd "$(dirname "$0")"

# Add version tagging to ni releases
date -u +%Y.%m%d.%H%M > core/boot/version

./markcheck

./boot

# IMPORTANT
# Set this so if you're building ni locally, you don't inadvertently bake in
# local settings from your home directory. Otherwise the ni image may contain
# some mixture of your settings and the stock ones (which is by design in
# production, since that's how those settings would persist across networked
# installs). But for this ./build process you wouldn't want that to happen.
export NI_NO_HOME=yes

./ni --internal/lib \
  core/gen \
  core/json \
  core/deps \
  \
  core/conf \
  core/stream \
  core/meta \
  core/monitor \
  core/uri \
  core/fn \
  core/closure \
  core/destructure \
  \
  core/checkpoint \
  core/net \
  core/buffer \
  core/script \
  \
  core/assert \
  core/col \
  core/row \
  core/pl \
  core/bloom \
  core/cell \
  core/c \
  core/git \
  core/solr \
  core/archive \
  core/sqlite \
  \
  core/rb \
  core/lisp \
  core/sql \
  core/python \
  core/js \
  core/haskell \
  \
  core/binary \
  core/matrix \
  core/gnuplot \
  core/image \
  \
  core/http \
  core/caterwaul \
  core/jsplot \
  core/mapomatic \
  core/inspect \
  \
  core/kafka \
  core/docker \
  core/hadoop \
  core/pyspark \
  core/wiki \
  core/ffmpeg \
  \
  doc

# ./ni --dev/doc-check

./ni README.md rp'1../^##.*help\/usage/' \
     +[i'```' doc/usage i'```'] > README.md.gen
mv README.md.gen README.md

./test --update

if [[ `./ni //ni` != "$(< ni)" ]]; then
  echo "ni is unstable under replication" >&2
  exit 1
fi

unset NI_NO_HOME

wc -c ni

ni('ni:main')->def('/io/named_io_fns.b',
  open2   => fn q{CORE::open $_[0], $_[1]},
  fcntl   => fn q{CORE::fcntl $_[0], $_[1], $_[2]},
  fork    => fn q{CORE::fork},
  rename  => fn q{CORE::rename $_[0], $_[1]},
  unlink  => fn q{CORE::unlink @_},
  waitpid => fn q{CORE::waitpid $_[0], $_[1]});

ni('ni:/object')->child('/io/object')
  ->doc
  ->TODO(q[migrate die() into /lib/ as a base behavior])
  ->end

  ->def('ops.b', '(bool' => fn q{1})

  ->def('checks.b',
    die => fn q{shift; die join " ", @_},

    io_check => fn q{
      my $self  = shift;
      my $check = shift;
      my $fn    = shift;
      my $r     = &$fn(@_);
      $self->die($fn, $!) unless &$check($r);
      $r;
    },

    io_check_defined => fn q{shift->io_check(sub {defined shift}, @_)},
    io_check_true    => fn q{shift->io_check(sub {shift}, @_)})

  ->def('constructors.b',
    '(+' => fn q{ni('ni:/io/cat')->new(@_[0, 1])})

  ->def('memory.b',
    read_all => fn q{
      shift->into_sync(ni('ni:/io/str')->new(my $data = ''));
      $data;
    },
    write_all => fn q{
      my $self = shift;
      ni('ni:/io/str')->new($_[0])->into_sync($self);
    });

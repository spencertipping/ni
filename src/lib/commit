no strict qw/refs/;

sub ni::eval {eval shift}

my $commit_code = <<'_';
require Digest::MD5;

sub by_id {${"ni::$_[1]\::commit"}}

sub new {
  my $class   = shift;
  my $code    = pop;
  my @parents = map ref($_) ? $_->binary_id : $_, @_;
  my $packed  = pack('n/(n/a)', @parents) . pack 'N/a', $code;
  $packed     = Digest::MD5::md5($packed) . $packed;
  bless(\$packed, $class)->eval;
}

sub commit    {shift}
sub id        {unpack 'H32', ${$_[0]}}
sub binary_id {unpack 'a16', ${$_[0]}}
sub code      {unpack 'x16 n/(n/x) N/a', ${$_[0]}}
sub parents   {unpack 'x16 n/(n/a)',     ${$_[0]}}
sub package   {'ni::' . shift->id}

sub child {ref($_[0])->new(shift->binary_id, @_)}

sub eval {
  local $_;
  my $self = shift;
  my $id = $self->id;
  ref($self)->by_id(unpack('H*'))
    or die "ni::commit $id: parent " . unpack('H*')
         . " has not yet been applied (i.e. does not exist)"
  for $self->parents;
  ni::eval join "\n", qq{# line 0 "ni::$id"},
                      "package ni::$id;",
                      $self->code;
  die $@ if $@;
  print STDERR "\n\nCOMMIT\npackage ni::$id;\n" . $self->code . "\n";
  ${"ni::$id\::commit"} = $self;
  $self;
}
_

ni::eval qq{# line 0 "ni::commit"
            package ni::commit;
            $commit_code};
die $@ if $@;

my $commit = ni::commit->new($commit_code);
my $p = $commit->package;
delete @ni::commit::{keys %ni::commit::};
@{'ni::/lib/commit::ISA'} = $p;
bless $commit, 'ni::/lib/commit';

# No need for this function in the final image; it's just some DSL to pack
# code more efficiently.
sub fn($) {
  (my $code = shift) =~ s/^\s*\n|\s*$//g;
  my @lines = split /\n/, $code;
  my $spaces = length $code;
  for (@lines) {
    $spaces = length $1 if /^([ \t]*)\S/ && length $1 < $spaces;
  }
  $spaces = ' ' x $spaces;
  s/^$spaces// for @lines;
  join "\n", @lines;
}

my $image_id = $commit->child(<<'_')->id;
# line 1 "ni::/lib/image"
sub def {
  my $self = shift;
  my %defs = @_;
  @{$$self{named}}{keys %defs} = values %defs;
  $self;
}

sub resolve {
  my ($self, $name) = @_;
  die "ni: cannot resolve '$name'" unless exists $$self{named}->{$name};
  $$self{named}->{$name};
}
_

@{'ni::/lib/image::ISA'} = "ni::$image_id";

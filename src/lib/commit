use strict;
use warnings;
no warnings qw/redefine void/;
no strict qw/refs/;

sub ni::eval {eval shift}

my $commit_code = <<'_';
require Digest::MD5;

sub new {
  my $class   = shift;
  my $code    = pop;
  my @parents = @_;
  my $packed  = pack('n/(n/a)', @parents) . pack 'N/a', $code;
  $packed     = Digest::MD5::md5($packed) . $packed;
  bless(\$packed, $class)->eval;
}

sub id        {unpack 'H32', ${$_[0]}}
sub binary_id {unpack 'a16', ${$_[0]}}
sub code      {unpack 'x16 n/(n/x) N/a', ${$_[0]}}
sub parents   {unpack 'x16 n/(n/a)',     ${$_[0]}}

sub eval {
  my $self = shift;
  my $id = $self->id;
  exists $ni::{unpack('H*') . '::'}
    or die "ni::commit $id: parent " . unpack('H*')
         . " has not yet been applied (i.e. does not exist)"
  for $self->parents;
  ni::eval join "\n", qq{# line 0 "ni::$id"},
                      "package ni::$id;",
                      $self->code;
  die $@ if $@;
  $self;
}
_

ni::eval qq{# line 0 "ni::commit"
            package ni::commit;
            $commit_code};
die $@ if $@;

my $id = ($ni::commit = ni::commit->new($commit_code))->id;
delete @ni::commit::{keys %ni::commit::}, $ni::{'commit::'};
@ni::commit::ISA = "ni::$id";

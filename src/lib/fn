ni('ni:/lib/slice')->new('/lib/fn_init.b',
  instantiate => fn q{
    my $class = shift;
    my $code  = pop;
    my $proto = @_ && $_[-1] =~ /^\(/ ? pop : '';
    +{code        => $code,
      proto       => $proto,
      eval_number => undef,
      annotations => [@_]};
  },
  compile => fn q{
    local $@;
    my $self = shift;
    $$self{proto} ||= '';
    $$self{fn} = $self->class->eval(
      "sub $$self{proto} {$$self{code}\n}",
      $self);
    $$self{fn};
  },
  ctor => fn q{shift->compile},
  dtor => fn q{$_[0]->class->uneval($_[0])});

ni('ni:/lib/slice')->new('/lib/fn.c_eval.b',
  ctor => fn q{shift->{evals} = {}},
  eval => fn q{
    my ($self, $code, $fn) = shift;
    my ($en) = eval('__FILE__') =~ /eval (\d+)/;
    Scalar::Util::weaken($$self{++$en} = $fn);
    $fn->eval_number($en);
    my $r = ni::eval $code;
    die "ni:/lib/fn: failed to compile $code: $@" if $@;
    $r;
  },
  uneval => fn q{
    my ($self, $fn) = @_;
    delete $$self{evals}{$fn->eval_number};
  });

delete @{'lib/fn::'}{qw/new compile/};
ni('ni:/object')->child('/lib/fn', '/lib/instantiable.b', '/lib/fn_init.b')
  ->rw('/lib/fn_rw.b', qw/eval_number/);

ni('ni:/lib/fn.c')->add('/lib/fn.c_eval.b');

ni('ni:/lib/fn')
  ->ro('/lib/fn_ro.b', qw/code annotations fn/)
  ->def('/lib/fn_ops.b',
    '(""' => fn q{shift->{code}},
    '(eq' => fn q{
      ref($_[0]) eq ref($_[1])
        and Scalar::Util::refaddr($_[0]) == Scalar::Util::refaddr($_[1])});

delete ${main::}{fn};

ni('ni:main')->def('/lib/static_fn.b',
  fn => ni('ni:/lib/fn')->new('($)',  q{ni('ni:/lib/fn')->new(@_)}),
  fp => ni('ni:/lib/fn')->new('($$)', q{ni('ni:/lib/fn')->new(@_)}));

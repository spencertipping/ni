ni('ni:/lib/slice')->new('/lib/fn_init.b',
  instantiate => fn q{
    my $class = shift;
    my $code  = pop;
    my $proto = @_ && $_[-1] =~ /^\(/ ? pop : '';
    +{code        => $code,
      proto       => $proto,
      closure     => undef,
      annotations => [@_]};
  },

  compile => fn q{
    # NB: everything here needs to happen in a single method; otherwise JIT
    # compilation will cause infinite recursion.
    local ($@, $_);
    my $self = shift;
    $$self{proto} ||= '';

    my $fn_code = qq{sub $$self{proto} {$$self{code}\n}};

    my $closure = $$self{closure};
    if ($closure) {
      my $closure_code = join ';',
        map /^([@%])/ ? "my$_=$1\\{\${\$_[0]}{'$_'}\\}"
          : /^\$/     ? "my$_=\${\$_[0]}{'$_'}"
          :             "my\$$_=\${\$_[0]}{'$_'}",
        sort keys %$closure;

      my $code   = qq{sub {$closure_code; $fn_code}};
      my $fn_gen = ni::eval $code;
      die "ni:/lib/fn failed to compile $code: $@" if $@;
      return $$self{fn} = &$fn_gen($closure);
    } else {
      $$self{fn} = ni::eval $fn_code;
      die "ni:/lib/fn failed to compile $fn_code: $@" if $@;
      return $$self{fn};
    }
  });

delete @{'lib/fn::'}{qw/new compile/};
ni('ni:/object')->child('/lib/fn', '/lib/instantiable.b', '/lib/fn_init.b')
  ->doc
  ->description(
    TODO q{Give functions a way to name themselves so we can do #line
           reporting});

delete ${main::}{fn};

ni('ni:main')->def('/lib/static_fn.b',
  fc => fn q{ni('ni:/lib/fn')->new(pop)->closure(@_)},
  fn => ni('ni:/lib/fn')->new('($)',  q{ni('ni:/lib/fn')->new(@_)}),
  fp => ni('ni:/lib/fn')->new('($$)', q{ni('ni:/lib/fn')->new(@_)}),
  fk => ni('ni:/lib/fn')->new('($)', q{
    ni('ni:/lib/fn')->closure('@x' => [@_], q{wantarray ? @x : $x[0]});
  }));

ni('ni:/lib/fn')
  ->ro('ro.b', qw/code annotations fn/)
  ->rw('rw.b', qw/closure/)
  ->def('ops.b',
    '(""' => fn q{my $self = shift; "fn {$$self{code}}"},
    '(eq' => fn q{
      ref($_[0]) eq ref($_[1])
        and Scalar::Util::refaddr($_[0]) == Scalar::Util::refaddr($_[1]);
    });

# /lib/slice.b
ni->def('ni:/lib/slice.b' =>
  bless {
    name => '/lib/slice.b',
    methods => {
      apply => fn q{
        local $_;
        my ($self, $p) = @_;
        $p = $p->package if ref $p;
        die "/lib/slice.b->apply('$p'): perl packages don't start with "
          . "slashes (this fails on older versions of perl)" if $p =~ /^\//;
        return if $$self{applied_to}{$p};
        for (keys %{$$self{methods}}) {
          die "$self: overlapping method $p\::$_" if defined *{"$p\::$_"}{CODE};
        }
        $self->apply_($p);
      },

      apply_ => fn q{
        local $_;
        my ($self, $p) = @_;
        return if $$self{applied_to}{$p};
        $$self{applied_to}{$p} = 1;
        push @{"$p\::ctors"}, $$self{ctor} if $$self{ctor};
        push @{"$p\::dtors"}, $$self{dtor} if $$self{dtor};
        if (grep /^\(/, keys %{$$self{methods}}) {
          *{"$p\::()"} = sub {};
          *{"$p\::OVERLOAD"} = {};
        }
        *{"$p\::$_"} = \&{$$self{methods}{$_}} for keys %{$$self{methods}};
        $self;
      }
    }
  }, 'lib/slice');

ni('ni:/lib/slice.b')->{methods}->{apply_}
  ->(ni('ni:/lib/slice.b'), 'lib/slice');

ni->def('ni:/lib/slice_init.b' =>
  bless {
    name => '/lib/slice_init.b',
    methods => {
      instantiate => fn q{
        my $class = shift;
        my $name  = shift;
        my %args  = @_;
        +{ctor       => delete($args{ctor}),
          dtor       => delete($args{dtor}),
          applied_to => delete($args{applied_to}),
          name       => $name,
          methods    => \%args};
      }
    }
  }, 'lib/slice');

ni('ni:/lib/slice_init.b')->apply('lib/slice');

ni->def('ni:/lib/instantiable.b' =>
  bless {
    name => '/lib/instantiable.b',
    methods => {
      new => fn q{
        local $_;
        my $class   = shift;
        my $package = ref $class ? $class->package : $class;
        my $self    = bless &{"$package\::instantiate"}($class, @_), $package;
        $_->($self) for @{ref($self) . "::ctors"};
        $self;
      }
    }
  }, 'lib/slice');

ni('ni:/lib/instantiable.b')->apply('lib/slice');

ni->def(
  'ni:/lib/named_in_ni.b' =>
    'lib/slice'->new('/lib/named_in_ni.b',
      namespace => fn q{'ni'}),
  'ni:/lib/named.b' =>
    'lib/slice'->new('/lib/named.b',
      ctor => fn q{my $s = shift; ni->def($s->name, $s)},
      name => fn q{$_[0]->namespace . ":" . $_[0]->{name}}));

ni('ni:/lib/named.b')->apply('lib/slice');
ni('ni:/lib/named_in_ni.b')->apply('lib/slice');

'lib/slice'->new('/lib/namespaced.b',
  package => fn q{(my $name = shift->{name}) =~ s/^\///; $name});

ni('ni:/lib/namespaced.b')->apply('lib/slice');

# /lib/tag.b
'lib/slice'->new('/lib/resolver.b',
  resolve => fn q{ref $_[1] ? $_[1] : ni"ni:$_[1]"});

'lib/slice'->new('/lib/tag.b',
  apply => fn q{
    local $_;
    my ($self, $p) = @_;
    $_->apply($p) for @{$$self{slices}};
    $self;
  });

'lib/slice'->new('/lib/tag_init.b',
  instantiate => fn q{
    local $_;
    my $class = shift;
    my $name  = shift;
    +{name   => $name,
      slices => [map $class->resolve($_), @_]};
  });

ni('ni:/lib/tag.b')->apply('lib/tag');
ni('ni:/lib/tag_init.b')->apply('lib/tag');
ni('ni:/lib/named.b')->apply('lib/tag');
ni('ni:/lib/named_in_ni.b')->apply('lib/tag');
ni('ni:/lib/namespaced.b')->apply('lib/tag');
ni('ni:/lib/instantiable.b')->apply('lib/tag');
ni('ni:/lib/resolver.b')->apply('lib/tag');

# /lib/branch.b
'lib/slice'->new('/lib/branch.b',
  apply => fn q{
    local $_;
    my ($self, $p) = @_;
    $p = $p->package if ref $p;
    $$self{applied_to}{$p} = 1;
    $_->apply($p) for @{$$self{slices}};
    $self;
  },
  add => fn q{
    local $_;
    my $self = shift;
    my @s = map $self->resolve($_), @_;
    push @{$$self{slices}}, @s;
    for my $p (sort keys %{$$self{applied_to}}) {$_->apply($p) for @s}
    $self;
  });

'lib/slice'->new('/lib/branch_init.b',
  instantiate => fn q{
    local $_;
    my $class = shift;
    my $name  = shift;
    +{name       => $name,
      applied_to => {},
      slices     => [map $class->resolve($_), @_]};
  });

'lib/tag'->new('/lib/perlbranch.b',
  '/lib/branch.b',
  '/lib/named.b',
  '/lib/named_in_ni.b',
  '/lib/namespaced.b',
  '/lib/resolver.b');

ni('ni:/lib/perlbranch.b')->apply('lib/branch');
ni('ni:/lib/branch_init.b')->apply('lib/branch');

'lib/slice'->new('/lib/instance.b',
  DESTROY => fn q{
    local $_;
    my $self = shift;
    defined($_) && $_->($self) for @{ref($self) . '::dtors'};
  },
  class => fn q{ni 'ni:/' . ref shift});

ni('ni:/lib/doc')->doc
  ->synopsis(q'
    ni("ni:/some/class")->doc
      ->synopsis(...)
      ->description(...)
      ->eg(...)
      ->TODO(...)
      ...')

  ->TODO(
    q[Use a better preprocessor; ni::outdent fixes indentation, but we also
      want to unwrap lines unless they're split at paragraphs (like
      markdown).])

  ->description(
    q[Associate documentation with the specified class. Documentation is stored
      separately and in the "ni.doc" namespace; this way you can serialize
      instances of the class and the class's code without bringing along all of
      its documentation and unit tests.],

    q[Documentation objects are internally represented as arrays of quoted
      method calls:],
    eg q{
      my $doc = ni("ni:/lib/doc")->new("foo");
      now $doc->{doc} == [];
      $doc->foo("bar bif baz");
      now $doc->{doc} == [["foo", "bar bif baz"]];
    },

    q[This documentation can later be compiled into things like manpages,
      markdown, or HTML by target-specific conversion functions. Documentation
      also stores unit tests, which are specified using "eg":],
    eg q{
      my $doc = ni("ni:/object")->child("/doctest_foo")->doc;
      my $passing_test = q{return 1};
      my $failing_test = q{return 0};
      $doc->eg($passing_test)
          ->description(q[Foo objects are contrived examples.],
                        eg $failing_test,
                        q[So there.]);
      now scalar($doc->tests) == 2;
    });

ni('ni:/io/object')->child('/fabric/rmi')
  ->doc
  ->description(
    q[An open connection to another ni instance. This module provides the
      ability to bootstrap a remote perl interpreter with an async RMI event
      loop, and provides options about send/receive data encoding (which is
      important for trust/security reasons).],

    q[Method calls are proxied to named objects on the remote, and each one is
      sent in a packet that contains the fully-serialized context for the
      call.])

  ->TODO(q[The codec stuff is awful. Nothing about a codec is so global that it
           should apply to all method calls; maybe a class has a per-method
           codec disposition, or maybe we infer the best one by serialization
           performance. Either way, global codecs don't make sense here.])
  ->end

  ->instantiate_with_defaults(
    qw/arg_codec return_codec image/,
    fn q{(arg_codec    => ni('ni:/fabric/qperl')->new,
          return_codec => ni('ni:/fabric/qjson')->new,
          image        => 1)});

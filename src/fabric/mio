ni('ni:/io/object')->child('/fabric/mio')
  ->ro('/fabric/mio_ro.b', qw/ io packet_size /)
  ->def('/fabric/mio_init.b',
    instantiate => fn q{
      my ($self, $io, %args) = @_;
      +{io          => $io,
        packet_size => $args{packet_size} || 32768,
        channel_id  => 0,
        channels    => {}};
    })

  ->def('/fabric/mio_packet.b',
    data_packet => fn q{
      my $self      = shift;
      my $stream_id = shift;
      pack 'NN/a', $stream_id, $_[0];
    },
    eof_packet => fn q{
      my ($self, $stream_id) = @_;
      pack 'NN', $stream_id, 0;
    })

  ->doc
  ->synopsis(q'
    my $mio = ni("ni:/fabric/mio")->new;
    my $channel1 = $mio->channel;
    my $channel2 = $mio->channel;
    $channel1->write("8MB data" x 1000000);
    $channel2->write("short string");
    $mio->into_sync($socket_or_something);')

  ->description(
    q[Provides a multiplexed interface around a single possibly-bidirectional
      IO channel.]);
